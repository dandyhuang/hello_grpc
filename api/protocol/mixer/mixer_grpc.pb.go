// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.2
// source: protocol/mixer/mixer.proto

package rec5

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankServiceClient is the client API for RankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankServiceClient interface {
	Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankResponse, error)
}

type rankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankServiceClient(cc grpc.ClientConnInterface) RankServiceClient {
	return &rankServiceClient{cc}
}

func (c *rankServiceClient) Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankResponse, error) {
	out := new(RankResponse)
	err := c.cc.Invoke(ctx, "/rec5.RankService/Rank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServiceServer is the server API for RankService service.
// All implementations must embed UnimplementedRankServiceServer
// for forward compatibility
type RankServiceServer interface {
	Rank(context.Context, *RankRequest) (*RankResponse, error)
	mustEmbedUnimplementedRankServiceServer()
}

// UnimplementedRankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRankServiceServer struct {
}

func (UnimplementedRankServiceServer) Rank(context.Context, *RankRequest) (*RankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rank not implemented")
}
func (UnimplementedRankServiceServer) mustEmbedUnimplementedRankServiceServer() {}

// UnsafeRankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankServiceServer will
// result in compilation errors.
type UnsafeRankServiceServer interface {
	mustEmbedUnimplementedRankServiceServer()
}

func RegisterRankServiceServer(s grpc.ServiceRegistrar, srv RankServiceServer) {
	s.RegisterService(&RankService_ServiceDesc, srv)
}

func _RankService_Rank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).Rank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rec5.RankService/Rank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).Rank(ctx, req.(*RankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RankService_ServiceDesc is the grpc.ServiceDesc for RankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rec5.RankService",
	HandlerType: (*RankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rank",
			Handler:    _RankService_Rank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/mixer/mixer.proto",
}

// RankHttpServiceClient is the client API for RankHttpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankHttpServiceClient interface {
	Check(ctx context.Context, in *RankHttpRequest, opts ...grpc.CallOption) (*RankHttpResponse, error)
	Rank(ctx context.Context, in *RankHttpRequest, opts ...grpc.CallOption) (*RankHttpResponse, error)
}

type rankHttpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankHttpServiceClient(cc grpc.ClientConnInterface) RankHttpServiceClient {
	return &rankHttpServiceClient{cc}
}

func (c *rankHttpServiceClient) Check(ctx context.Context, in *RankHttpRequest, opts ...grpc.CallOption) (*RankHttpResponse, error) {
	out := new(RankHttpResponse)
	err := c.cc.Invoke(ctx, "/rec5.RankHttpService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankHttpServiceClient) Rank(ctx context.Context, in *RankHttpRequest, opts ...grpc.CallOption) (*RankHttpResponse, error) {
	out := new(RankHttpResponse)
	err := c.cc.Invoke(ctx, "/rec5.RankHttpService/Rank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankHttpServiceServer is the server API for RankHttpService service.
// All implementations must embed UnimplementedRankHttpServiceServer
// for forward compatibility
type RankHttpServiceServer interface {
	Check(context.Context, *RankHttpRequest) (*RankHttpResponse, error)
	Rank(context.Context, *RankHttpRequest) (*RankHttpResponse, error)
	mustEmbedUnimplementedRankHttpServiceServer()
}

// UnimplementedRankHttpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRankHttpServiceServer struct {
}

func (UnimplementedRankHttpServiceServer) Check(context.Context, *RankHttpRequest) (*RankHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRankHttpServiceServer) Rank(context.Context, *RankHttpRequest) (*RankHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rank not implemented")
}
func (UnimplementedRankHttpServiceServer) mustEmbedUnimplementedRankHttpServiceServer() {}

// UnsafeRankHttpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankHttpServiceServer will
// result in compilation errors.
type UnsafeRankHttpServiceServer interface {
	mustEmbedUnimplementedRankHttpServiceServer()
}

func RegisterRankHttpServiceServer(s grpc.ServiceRegistrar, srv RankHttpServiceServer) {
	s.RegisterService(&RankHttpService_ServiceDesc, srv)
}

func _RankHttpService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankHttpServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rec5.RankHttpService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankHttpServiceServer).Check(ctx, req.(*RankHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankHttpService_Rank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankHttpServiceServer).Rank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rec5.RankHttpService/Rank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankHttpServiceServer).Rank(ctx, req.(*RankHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RankHttpService_ServiceDesc is the grpc.ServiceDesc for RankHttpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankHttpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rec5.RankHttpService",
	HandlerType: (*RankHttpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _RankHttpService_Check_Handler,
		},
		{
			MethodName: "Rank",
			Handler:    _RankHttpService_Rank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/mixer/mixer.proto",
}
