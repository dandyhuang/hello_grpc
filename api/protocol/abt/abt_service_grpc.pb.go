// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.2
// source: protocol/abt/abt_service.proto

package rec5

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AbtServiceClient is the client API for AbtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbtServiceClient interface {
	Route(ctx context.Context, in *AbtestReq, opts ...grpc.CallOption) (*AbtestRsp, error)
}

type abtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAbtServiceClient(cc grpc.ClientConnInterface) AbtServiceClient {
	return &abtServiceClient{cc}
}

func (c *abtServiceClient) Route(ctx context.Context, in *AbtestReq, opts ...grpc.CallOption) (*AbtestRsp, error) {
	out := new(AbtestRsp)
	err := c.cc.Invoke(ctx, "/rec5.AbtService/route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbtServiceServer is the server API for AbtService service.
// All implementations must embed UnimplementedAbtServiceServer
// for forward compatibility
type AbtServiceServer interface {
	Route(context.Context, *AbtestReq) (*AbtestRsp, error)
	mustEmbedUnimplementedAbtServiceServer()
}

// UnimplementedAbtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAbtServiceServer struct {
}

func (UnimplementedAbtServiceServer) Route(context.Context, *AbtestReq) (*AbtestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedAbtServiceServer) mustEmbedUnimplementedAbtServiceServer() {}

// UnsafeAbtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbtServiceServer will
// result in compilation errors.
type UnsafeAbtServiceServer interface {
	mustEmbedUnimplementedAbtServiceServer()
}

func RegisterAbtServiceServer(s grpc.ServiceRegistrar, srv AbtServiceServer) {
	s.RegisterService(&AbtService_ServiceDesc, srv)
}

func _AbtService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbtestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbtServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rec5.AbtService/route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbtServiceServer).Route(ctx, req.(*AbtestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AbtService_ServiceDesc is the grpc.ServiceDesc for AbtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rec5.AbtService",
	HandlerType: (*AbtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "route",
			Handler:    _AbtService_Route_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/abt/abt_service.proto",
}
