// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.2
// source: protocol/common/rank.proto

package rec5

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Rank相关
type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId     string `protobuf:"bytes,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleType   int32  `protobuf:"varint,2,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`      //0:相关推荐 1：同标签推荐 2：同专题推荐
	StrategyId   string `protobuf:"bytes,3,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`       //游戏调参策略ID
	RerankAlg    string `protobuf:"bytes,4,opt,name=rerank_alg,json=rerankAlg,proto3" json:"rerank_alg,omitempty"`          //游戏调参算法
	StrategyType string `protobuf:"bytes,5,opt,name=strategy_type,json=strategyType,proto3" json:"strategy_type,omitempty"` //游戏调参类型
	TuningMethod string `protobuf:"bytes,6,opt,name=tuning_method,json=tuningMethod,proto3" json:"tuning_method,omitempty"` //游戏调参方式
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_rank_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_rank_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_protocol_common_rank_proto_rawDescGZIP(), []int{0}
}

func (x *Module) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *Module) GetModuleType() int32 {
	if x != nil {
		return x.ModuleType
	}
	return 0
}

func (x *Module) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *Module) GetRerankAlg() string {
	if x != nil {
		return x.RerankAlg
	}
	return ""
}

func (x *Module) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *Module) GetTuningMethod() string {
	if x != nil {
		return x.TuningMethod
	}
	return ""
}

//请求Item信息
type RankItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         int64             `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Creativeid    int64             `protobuf:"varint,2,opt,name=creativeid,proto3" json:"creativeid,omitempty"`                                                                                                           //创意id，与appid的关系是多对
	PricingType   int32             `protobuf:"varint,3,opt,name=pricing_type,json=pricingType,proto3" json:"pricing_type,omitempty"`                                                                                      // 计费类型: 1、表示cpc；2、表示 ocpc; 3、表示cpd；4、表示 ocpd;
	ChargeMode    int32             `protobuf:"varint,4,opt,name=charge_mode,json=chargeMode,proto3" json:"charge_mode,omitempty"`                                                                                         // 计费模式：1、cpd；2、ocpd；4、动态出价
	SecondCvType  int32             `protobuf:"varint,5,opt,name=second_cv_type,json=secondCvType,proto3" json:"second_cv_type,omitempty"`                                                                                 //ocpc阶段, 第二目标转化目标
	Price         float32           `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`                                                                                                                    // 广告的价格
	Bid           float32           `protobuf:"fixed32,7,opt,name=bid,proto3" json:"bid,omitempty"`                                                                                                                        //广告主出价
	GeneralSwitch bool              `protobuf:"varint,8,opt,name=general_switch,json=generalSwitch,proto3" json:"general_switch,omitempty"`                                                                                //通投
	MapContext    map[string]string `protobuf:"bytes,99,rep,name=map_context,json=mapContext,proto3" json:"map_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段，性能不高，字段序号必须小于99
	//推荐响应字段 repeated 兼容多目标打分(一个创意一个打分有多个分值)
	RecallType     int32     `protobuf:"varint,100,opt,name=recall_type,json=recallType,proto3" json:"recall_type,omitempty"`                     //召回类型
	Recall         []float32 `protobuf:"fixed32,101,rep,packed,name=recall,proto3" json:"recall,omitempty"`                                       //召回打分(公共)
	StrategyRecall []float32 `protobuf:"fixed32,102,rep,packed,name=strategy_recall,json=strategyRecall,proto3" json:"strategy_recall,omitempty"` //策略召回打分(搜索公共)
	Filter         []float32 `protobuf:"fixed32,103,rep,packed,name=filter,proto3" json:"filter,omitempty"`                                       //粗排打分(搜索)
	FilterCtr      []float32 `protobuf:"fixed32,104,rep,packed,name=filter_ctr,json=filterCtr,proto3" json:"filter_ctr,omitempty"`                //粗排Ctr打分(CPD)
	FilterCvr      []float32 `protobuf:"fixed32,105,rep,packed,name=filter_cvr,json=filterCvr,proto3" json:"filter_cvr,omitempty"`                //粗排Cvr打分(CPD)
	Ctr            []float32 `protobuf:"fixed32,106,rep,packed,name=ctr,proto3" json:"ctr,omitempty"`                                             //ctr打分(公共)
	Cvr            []float32 `protobuf:"fixed32,107,rep,packed,name=cvr,proto3" json:"cvr,omitempty"`                                             //cvr打分(公共)
	Cvr2           []float32 `protobuf:"fixed32,108,rep,packed,name=cvr2,proto3" json:"cvr2,omitempty"`                                           //cvr2打分(公共)
	Ltv            []float32 `protobuf:"fixed32,109,rep,packed,name=ltv,proto3" json:"ltv,omitempty"`                                             //ltv打分(游戏)
	Ltv2           []float32 `protobuf:"fixed32,110,rep,packed,name=ltv2,proto3" json:"ltv2,omitempty"`                                           //ltv2(游戏)
	Ltv3           []float32 `protobuf:"fixed32,111,rep,packed,name=ltv3,proto3" json:"ltv3,omitempty"`                                           //ltv3(游戏)
	PayWill        []float32 `protobuf:"fixed32,112,rep,packed,name=pay_will,json=payWill,proto3" json:"pay_will,omitempty"`                      //pay_wil打分(游戏)
	PayWill2       []float32 `protobuf:"fixed32,113,rep,packed,name=pay_will2,json=payWill2,proto3" json:"pay_will2,omitempty"`                   //pay_will2 打分(游戏)
	Retention      []float32 `protobuf:"fixed32,114,rep,packed,name=retention,proto3" json:"retention,omitempty"`                                 //retention 打分(游戏)
	TagA           string    `protobuf:"bytes,130,opt,name=tag_a,json=tagA,proto3" json:"tag_a,omitempty"`
	TagB           string    `protobuf:"bytes,131,opt,name=tag_b,json=tagB,proto3" json:"tag_b,omitempty"`
	StrategyId     string    `protobuf:"bytes,132,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"` //游戏调参策略ID
	RerankAlg      string    `protobuf:"bytes,133,opt,name=rerank_alg,json=rerankAlg,proto3" json:"rerank_alg,omitempty"`    //游戏调参算法
}

func (x *RankItemInfo) Reset() {
	*x = RankItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_rank_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankItemInfo) ProtoMessage() {}

func (x *RankItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_rank_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankItemInfo.ProtoReflect.Descriptor instead.
func (*RankItemInfo) Descriptor() ([]byte, []int) {
	return file_protocol_common_rank_proto_rawDescGZIP(), []int{1}
}

func (x *RankItemInfo) GetAppid() int64 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *RankItemInfo) GetCreativeid() int64 {
	if x != nil {
		return x.Creativeid
	}
	return 0
}

func (x *RankItemInfo) GetPricingType() int32 {
	if x != nil {
		return x.PricingType
	}
	return 0
}

func (x *RankItemInfo) GetChargeMode() int32 {
	if x != nil {
		return x.ChargeMode
	}
	return 0
}

func (x *RankItemInfo) GetSecondCvType() int32 {
	if x != nil {
		return x.SecondCvType
	}
	return 0
}

func (x *RankItemInfo) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RankItemInfo) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *RankItemInfo) GetGeneralSwitch() bool {
	if x != nil {
		return x.GeneralSwitch
	}
	return false
}

func (x *RankItemInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

func (x *RankItemInfo) GetRecallType() int32 {
	if x != nil {
		return x.RecallType
	}
	return 0
}

func (x *RankItemInfo) GetRecall() []float32 {
	if x != nil {
		return x.Recall
	}
	return nil
}

func (x *RankItemInfo) GetStrategyRecall() []float32 {
	if x != nil {
		return x.StrategyRecall
	}
	return nil
}

func (x *RankItemInfo) GetFilter() []float32 {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RankItemInfo) GetFilterCtr() []float32 {
	if x != nil {
		return x.FilterCtr
	}
	return nil
}

func (x *RankItemInfo) GetFilterCvr() []float32 {
	if x != nil {
		return x.FilterCvr
	}
	return nil
}

func (x *RankItemInfo) GetCtr() []float32 {
	if x != nil {
		return x.Ctr
	}
	return nil
}

func (x *RankItemInfo) GetCvr() []float32 {
	if x != nil {
		return x.Cvr
	}
	return nil
}

func (x *RankItemInfo) GetCvr2() []float32 {
	if x != nil {
		return x.Cvr2
	}
	return nil
}

func (x *RankItemInfo) GetLtv() []float32 {
	if x != nil {
		return x.Ltv
	}
	return nil
}

func (x *RankItemInfo) GetLtv2() []float32 {
	if x != nil {
		return x.Ltv2
	}
	return nil
}

func (x *RankItemInfo) GetLtv3() []float32 {
	if x != nil {
		return x.Ltv3
	}
	return nil
}

func (x *RankItemInfo) GetPayWill() []float32 {
	if x != nil {
		return x.PayWill
	}
	return nil
}

func (x *RankItemInfo) GetPayWill2() []float32 {
	if x != nil {
		return x.PayWill2
	}
	return nil
}

func (x *RankItemInfo) GetRetention() []float32 {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *RankItemInfo) GetTagA() string {
	if x != nil {
		return x.TagA
	}
	return ""
}

func (x *RankItemInfo) GetTagB() string {
	if x != nil {
		return x.TagB
	}
	return ""
}

func (x *RankItemInfo) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *RankItemInfo) GetRerankAlg() string {
	if x != nil {
		return x.RerankAlg
	}
	return ""
}

type RankRecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VecItems   []*RankItemInfo   `protobuf:"bytes,1,rep,name=vec_items,json=vecItems,proto3" json:"vec_items,omitempty"`                                                                                                //item列表信息
	Module     *Module           `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`                                                                                                                    //模块信息
	Query      string            `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`                                                                                                                      //query 词
	MapContext map[string]string `protobuf:"bytes,99,rep,name=map_context,json=mapContext,proto3" json:"map_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RankRecommendInfo) Reset() {
	*x = RankRecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_rank_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendInfo) ProtoMessage() {}

func (x *RankRecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_rank_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendInfo.ProtoReflect.Descriptor instead.
func (*RankRecommendInfo) Descriptor() ([]byte, []int) {
	return file_protocol_common_rank_proto_rawDescGZIP(), []int{2}
}

func (x *RankRecommendInfo) GetVecItems() []*RankItemInfo {
	if x != nil {
		return x.VecItems
	}
	return nil
}

func (x *RankRecommendInfo) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *RankRecommendInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RankRecommendInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

//请求参数
type RankRecommendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recommend   []*RankRecommendInfo `protobuf:"bytes,1,rep,name=recommend,proto3" json:"recommend,omitempty"`                                                                                      //请求详情
	VecTestInfo []*AlgMultiTestInfo  `protobuf:"bytes,2,rep,name=vec_test_info,json=vecTestInfo,proto3" json:"vec_test_info,omitempty"`                                                             //abt参数信息
	UserFeature []byte               `protobuf:"bytes,3,opt,name=user_feature,json=userFeature,proto3" json:"user_feature,omitempty"`                                                               //用户特征
	Context     map[string]string    `protobuf:"bytes,99,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RankRecommendRequest) Reset() {
	*x = RankRecommendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_rank_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendRequest) ProtoMessage() {}

func (x *RankRecommendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_rank_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendRequest.ProtoReflect.Descriptor instead.
func (*RankRecommendRequest) Descriptor() ([]byte, []int) {
	return file_protocol_common_rank_proto_rawDescGZIP(), []int{3}
}

func (x *RankRecommendRequest) GetRecommend() []*RankRecommendInfo {
	if x != nil {
		return x.Recommend
	}
	return nil
}

func (x *RankRecommendRequest) GetVecTestInfo() []*AlgMultiTestInfo {
	if x != nil {
		return x.VecTestInfo
	}
	return nil
}

func (x *RankRecommendRequest) GetUserFeature() []byte {
	if x != nil {
		return x.UserFeature
	}
	return nil
}

func (x *RankRecommendRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type RankRecommendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`          //0：成功，其他：失败
	Recommend []*RankRecommendInfo `protobuf:"bytes,2,rep,name=recommend,proto3" json:"recommend,omitempty"` //响应
}

func (x *RankRecommendResponse) Reset() {
	*x = RankRecommendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_common_rank_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendResponse) ProtoMessage() {}

func (x *RankRecommendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_common_rank_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendResponse.ProtoReflect.Descriptor instead.
func (*RankRecommendResponse) Descriptor() ([]byte, []int) {
	return file_protocol_common_rank_proto_rawDescGZIP(), []int{4}
}

func (x *RankRecommendResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RankRecommendResponse) GetRecommend() []*RankRecommendInfo {
	if x != nil {
		return x.Recommend
	}
	return nil
}

var File_protocol_common_rank_proto protoreflect.FileDescriptor

var file_protocol_common_rank_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x62, 0x74,
	0x2f, 0x72, 0x74, 0x72, 0x73, 0x5f, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xef, 0x06, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x76, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x65, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x66, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x74, 0x72, 0x18, 0x68, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x76,
	0x72, 0x18, 0x69, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x76, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x74, 0x72, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x03, 0x63, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x72, 0x18, 0x6b, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x03, 0x63, 0x76, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x72, 0x32, 0x18, 0x6c,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x72, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74,
	0x76, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x76, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x74, 0x76, 0x32, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x74, 0x76, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x74, 0x76, 0x33, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x74, 0x76, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6c, 0x6c,
	0x18, 0x70, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x70, 0x61, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x32, 0x18, 0x71, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x32, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x72, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x67, 0x5f, 0x61, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x41,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x5f, 0x62, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x09, 0x76, 0x65, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x65, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x63,
	0x35, 0x2e, 0x41, 0x6c, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x63, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x62, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x42, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x76,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x42, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07,
	0x2e, 0x2f, 0x3b, 0x72, 0x65, 0x63, 0x35, 0xa2, 0x02, 0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_common_rank_proto_rawDescOnce sync.Once
	file_protocol_common_rank_proto_rawDescData = file_protocol_common_rank_proto_rawDesc
)

func file_protocol_common_rank_proto_rawDescGZIP() []byte {
	file_protocol_common_rank_proto_rawDescOnce.Do(func() {
		file_protocol_common_rank_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_common_rank_proto_rawDescData)
	})
	return file_protocol_common_rank_proto_rawDescData
}

var file_protocol_common_rank_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protocol_common_rank_proto_goTypes = []interface{}{
	(*Module)(nil),                // 0: rank.Module
	(*RankItemInfo)(nil),          // 1: rank.RankItemInfo
	(*RankRecommendInfo)(nil),     // 2: rank.RankRecommendInfo
	(*RankRecommendRequest)(nil),  // 3: rank.RankRecommendRequest
	(*RankRecommendResponse)(nil), // 4: rank.RankRecommendResponse
	nil,                           // 5: rank.RankItemInfo.MapContextEntry
	nil,                           // 6: rank.RankRecommendInfo.MapContextEntry
	nil,                           // 7: rank.RankRecommendRequest.ContextEntry
	(*AlgMultiTestInfo)(nil),      // 8: rec5.AlgMultiTestInfo
}
var file_protocol_common_rank_proto_depIdxs = []int32{
	5, // 0: rank.RankItemInfo.map_context:type_name -> rank.RankItemInfo.MapContextEntry
	1, // 1: rank.RankRecommendInfo.vec_items:type_name -> rank.RankItemInfo
	0, // 2: rank.RankRecommendInfo.module:type_name -> rank.Module
	6, // 3: rank.RankRecommendInfo.map_context:type_name -> rank.RankRecommendInfo.MapContextEntry
	2, // 4: rank.RankRecommendRequest.recommend:type_name -> rank.RankRecommendInfo
	8, // 5: rank.RankRecommendRequest.vec_test_info:type_name -> rec5.AlgMultiTestInfo
	7, // 6: rank.RankRecommendRequest.context:type_name -> rank.RankRecommendRequest.ContextEntry
	2, // 7: rank.RankRecommendResponse.recommend:type_name -> rank.RankRecommendInfo
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_protocol_common_rank_proto_init() }
func file_protocol_common_rank_proto_init() {
	if File_protocol_common_rank_proto != nil {
		return
	}
	file_protocol_abt_rtrs_abtest_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protocol_common_rank_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_rank_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_rank_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_rank_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_common_rank_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_common_rank_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_common_rank_proto_goTypes,
		DependencyIndexes: file_protocol_common_rank_proto_depIdxs,
		MessageInfos:      file_protocol_common_rank_proto_msgTypes,
	}.Build()
	File_protocol_common_rank_proto = out.File
	file_protocol_common_rank_proto_rawDesc = nil
	file_protocol_common_rank_proto_goTypes = nil
	file_protocol_common_rank_proto_depIdxs = nil
}
