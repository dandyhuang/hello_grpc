// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: recommend.proto

package so_rtrs

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// *************************** begin ******************************
//Begin---------场景定义
//目的: 用于识别不同的场景
type SCENE_CMD_ID int32

const (
	SCENE_CMD_ID_UNKNOWN                                               SCENE_CMD_ID = 0
	SCENE_CMD_ID_SCENE_CMD_ID_INFORMATION_FLOW                         SCENE_CMD_ID = 1   //信息流--周群
	SCENE_CMD_ID_SCENE_CMD_ID_DOWNLOAD_RECOM                           SCENE_CMD_ID = 2   //下载后推荐--克浩
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_ASSOCIATE                SCENE_CMD_ID = 3   //应用商店联想--克浩
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_CPD_LIST                 SCENE_CMD_ID = 4   //应用商店搜索列表--克浩
	SCENE_CMD_ID_SCENE_CMD_ID_BROWSER_SEARCH                           SCENE_CMD_ID = 5   //浏览器搜索--克浩
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_DOWNLOAD_BEROFE_AFTER           SCENE_CMD_ID = 6   //商店下载前后  --曾志
	SCENE_CMD_ID_SCENE_CMD_ID_BROWSER_SITE                             SCENE_CMD_ID = 7   //浏览器名站   --邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_HOME_RECOMM                     SCENE_CMD_ID = 12  //应用商店首页推荐  --陈春梅
	SCENE_CMD_ID_SCENE_CMD_ID_THEME_ENTRANCE_RECOMMEND                 SCENE_CMD_ID = 19  // 主题字体首入页推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_CONTENT_DETAIL_RECOMM         SCENE_CMD_ID = 28  //内销游戏中心游戏内容详情页推荐--李建辉
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_THEME_LIST_PAGE_RECOMM            SCENE_CMD_ID = 50  // i主题主题列表页推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_FONT_LIST_PAGE_RECOMM             SCENE_CMD_ID = 51  // i主题字体列表页推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_THEME_COLUMN_RECOMM               SCENE_CMD_ID = 52  // i主题推荐页主题栏推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_SYSTEM_SETTING_THEME_RECOMM              SCENE_CMD_ID = 53  // 系统设置主题推荐页推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_DETAIL_PAGE_DOWNLOAD_AFTER        SCENE_CMD_ID = 54  // 主题详情页下载后--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_FONT_COLUMN_RECOMM                SCENE_CMD_ID = 55  // 主题推荐页字体栏--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_SEARCH_NO_RESULT                  SCENE_CMD_ID = 56  // 主题搜索无结果页--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_MINUS_ONE_THEME_RECOMM                   SCENE_CMD_ID = 57  // 负一屏主题卡片推荐--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_THEME_COLUMN_MORE_RECOMM          SCENE_CMD_ID = 58  // 推荐页更多主题--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_WALLPAPER_LIST_PAGE_RECOMM        SCENE_CMD_ID = 59  // 壁纸列表页场景--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_UNLOCK_LIST_PAGE_RECOMM           SCENE_CMD_ID = 60  // 锁屏列表--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_UNLOCK_COLUMN_RECOMM              SCENE_CMD_ID = 61  // 推荐页锁屏栏--兰佛军
	SCENE_CMD_ID_SCENE_CMD_ID_ITHEME_ALLSCENE_BANNER_RECOMM            SCENE_CMD_ID = 62  //i主题全局banner
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_RECOMM_LIST              SCENE_CMD_ID = 102 //搜索推荐页
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_RECOMM_DOWNLOAD                 SCENE_CMD_ID = 104 //内销商店推荐用下载管理--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_CPD_DOWNLOAD                    SCENE_CMD_ID = 105 //内销商店CPD用下载管理--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_LIST_GAME_SEARCH                SCENE_CMD_ID = 106 //内销列表游戏搜索--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_ASSOCIATE_GAME_SEARCH           SCENE_CMD_ID = 107 //内销联想词游戏搜索--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_BROADCAST_WORD           SCENE_CMD_ID = 108 //内销商店搜索轮播词--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_APP_SEARCH_HOT_WORD             SCENE_CMD_ID = 109 //内销商店应用搜索热词--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_GAME_SEARCH_HOT_WORD            SCENE_CMD_ID = 110 //内销商店游戏搜索热词--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_DETAIL_BEFOR_DOWNLOAD           SCENE_CMD_ID = 111 //内销商店详情页下载前--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_DETAIL_AFTER_DOWNLOAD           SCENE_CMD_ID = 112 //内销商店详情页下载后--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_FULL_SCENE                      SCENE_CMD_ID = 113 //内销商店全场景--陈浩南
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_CPD_AFTER_DOWNLOAD              SCENE_CMD_ID = 114 //内销CPD下载后--曾志
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_CPD_LIST_GAME_SEARCH            SCENE_CMD_ID = 115 //内销CPD列表游戏搜索--郭鑫鹏
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_CPD_ASSOCIATE_GAME_SEARCH       SCENE_CMD_ID = 116 //内销CPD联想词游戏搜索--郭鑫鹏
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_LIST_CPD_SEARCH          SCENE_CMD_ID = 117 //内销列表CPD搜索--郑世卓
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_DOWNLOAD_AFTER                  SCENE_CMD_ID = 118 //搜索、首页、详情页、更新页下载后   -- 肖明睿
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_LY_LIST_GAME_SEARCH             SCENE_CMD_ID = 119 //内销游戏联运列表搜索
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_LY_ASSOCIATE_GAME_SEARCH        SCENE_CMD_ID = 120 //内销游戏联运联想词搜索
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_UPDATE_PAGE                     SCENE_CMD_ID = 121 //应用商店-更新页
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_AFTER_UPDATE                    SCENE_CMD_ID = 122 //应用商店-更新后
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_NECESS_INSTALL                  SCENE_CMD_ID = 123 //应用商店-装机必备
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_DOWNLOAD_MANAGE                 SCENE_CMD_ID = 124 //应用商店-下载管理页
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_SEARCH_ACTIVE                   SCENE_CMD_ID = 125 //应用商店-搜索激活页
	SCENE_CMD_ID_SCENE_CMD_ID_APPSOTRE_SEARCH_NO_RESULT_RECOMM         SCENE_CMD_ID = 126 //应用商店搜索无结果页
	SCENE_CMD_ID_SCENE_CMD_ID_APPSTORE_APP_TAG                         SCENE_CMD_ID = 127 //应用商店-应用标签
	SCENE_CMD_ID_SCENE_CMD_ID_APPSOTRE_TAG_APPLIST                     SCENE_CMD_ID = 128 //应用商店-根据标签推荐APP
	SCENE_CMD_ID_SCENE_CMD_ID_H5_HOMEPAGE_RECOMM                       SCENE_CMD_ID = 200 //H5首页推荐
	SCENE_CMD_ID_SCENE_CMD_ID_H5_SPECIALPAGE_RECOMM                    SCENE_CMD_ID = 201 //H5专题页推荐
	SCENE_CMD_ID_SCENE_CMD_ID_H5_HOT_SEARCH_INSTALLATION               SCENE_CMD_ID = 202 //H5热搜安装
	SCENE_CMD_ID_SCENE_CMD_ID_H5_SEARCH_RESULT_PAGE                    SCENE_CMD_ID = 203 //H5搜索结果页
	SCENE_CMD_ID_SCENE_CMD_ID_H5_ASSOCIATIVE_WORD_SEARCH               SCENE_CMD_ID = 204 //H5联想词搜索
	SCENE_CMD_ID_SCENE_CMD_ID_H5_SEARCH_HOT_WORDS                      SCENE_CMD_ID = 205 //H5搜索热词
	SCENE_CMD_ID_SCENE_CMD_ID_H5_DETAILS_PAGE_BEFORE_DOWNLOAD_RECOMM   SCENE_CMD_ID = 206 //H5详情页下载前推荐
	SCENE_CMD_ID_SCENE_CMD_ID_H5_DETAILS_PAGE_AFTER_DOWNLOAD_RECOMM    SCENE_CMD_ID = 207 //H5详情页下载后推荐
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_PLAYLIST_CHANGE                   SCENE_CMD_ID = 301 //i音乐歌单推荐换一批--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_PLAYLIST_RECOMM                   SCENE_CMD_ID = 302 // i音乐热门歌单推荐--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_EVERYSONG_RECOMM                  SCENE_CMD_ID = 303 //i音乐每日歌曲推荐--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_FMFIRST_RECOMM                    SCENE_CMD_ID = 304 //有声读物热门推荐一级页面--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_FMSECOND_RECOMM                   SCENE_CMD_ID = 305 //有声读物热门推荐二级页面--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_FMONLINE_RECOMM                   SCENE_CMD_ID = 306 //有声读物热门推荐在线专辑推荐--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_EXCLUSIVE_RECOMM                  SCENE_CMD_ID = 307 //i音乐专属音乐推荐--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_EXCLUSIVE_CHANGE                  SCENE_CMD_ID = 308 //i音乐专属音乐换一批--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_IMUSIC_FMCOLUMN_RECOMM                   SCENE_CMD_ID = 309 //i音乐栏位推荐--陈奕奕
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_LIST_SEARCH                   SCENE_CMD_ID = 351 //内销游戏中心列表搜索--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_ASSOCIATE_SEARCH              SCENE_CMD_ID = 352 //内销游戏中心联想词搜索--黄斐铨
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_FORUM_HOME_RECOMM             SCENE_CMD_ID = 353 //内销游戏中心游戏论坛首页推荐--李建辉
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_CPD_LIST_SEARCH               SCENE_CMD_ID = 354 //内销游戏中心列表搜索--郭鑫鹏
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_CPD_ASSOCIATE_SEARCH          SCENE_CMD_ID = 355 //内销游戏中心联想词搜索--郭鑫鹏
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_CTR_PREDICT                   SCENE_CMD_ID = 356 //游戏CTR --郭鑫鹏
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_LY_LIST_SEARCH                SCENE_CMD_ID = 357 //游戏中心联运列表搜索
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_LY_ASSOCIATE_SEARCH           SCENE_CMD_ID = 358 //游戏中心联运联想词搜索
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_RECOMMEND                     SCENE_CMD_ID = 359 //游戏中心-首页-推荐列表
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_SEARCH_RECOM                  SCENE_CMD_ID = 360 //游戏中心-首页-搜索-联想词
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_SEARCH_LIST                   SCENE_CMD_ID = 361 //游戏中心-首页-搜索结果
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_GAME_DIV                      SCENE_CMD_ID = 362 //游戏中心-单机游戏列表
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_NETGAME_DIV                   SCENE_CMD_ID = 363 //游戏中心-网游列表
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_HOT                       SCENE_CMD_ID = 364 //游戏中心-排行
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_GAME                      SCENE_CMD_ID = 365 //游戏中心-排行
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_NETGAME                   SCENE_CMD_ID = 366 //游戏中心-网游排行
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_NEWGAME                   SCENE_CMD_ID = 367 //游戏中心-新游戏排行
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_GAME_DETAIL                   SCENE_CMD_ID = 368 //游戏中心-游戏详情页
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_CATEGORY                      SCENE_CMD_ID = 369 //游戏中心-分类
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_OUT             SCENE_CMD_ID = 370 //游戏中心-首页-每日一荐-外显
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_LIST            SCENE_CMD_ID = 371 //游戏中心-首页-每日一荐-列表
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_HOT_DIALOG_APP                SCENE_CMD_ID = 372 //游戏中心-装机必备（新打开游戏中心）
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_DOWNLOAD_MANAGEMENT_REC       SCENE_CMD_ID = 373 //游戏中心-下载管理-为您精选
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_OUT                SCENE_CMD_ID = 374 //游戏中心-搜索页-热门游戏推荐-外显
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_LIST               SCENE_CMD_ID = 375 //游戏中心-搜索页-热门游戏推荐-列表
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_DOWNLOAD_AFTER                SCENE_CMD_ID = 376 //游戏下载后
	SCENE_CMD_ID_SCENE_CMD_ID_GAMECENTER_GAME_BBS                      SCENE_CMD_ID = 377 //游戏论坛
	SCENE_CMD_ID_SCENE_CMD_ID_LOCKSCREEN_JOYPICTURE_RECOMM             SCENE_CMD_ID = 400 //内销悦图锁屏--马连洋
	SCENE_CMD_ID_SCENE_CMD_ID_QUICK_APP_SEARCH_PAGE_SEARCH             SCENE_CMD_ID = 410 //快应用搜索页搜索
	SCENE_CMD_ID_SCENE_CMD_ID_QUICK_APP_SECOND_LIST_RECOMM             SCENE_CMD_ID = 411 //快应用推荐页二级列表推荐
	SCENE_CMD_ID_SCENE_CMD_ID_QUICK_APP_HOMEPAGE_RECOMM                SCENE_CMD_ID = 412 //快应用首页推荐
	SCENE_CMD_ID_SCENE_CMD_ID_FAST_APP_SEARCH_BOX_GUESS_LIKE_RECOMM    SCENE_CMD_ID = 413
	SCENE_CMD_ID_SCENE_CMD_ID_FAST_APP_SEARCH_BOX_HOT_WORD_RECOMM      SCENE_CMD_ID = 414
	SCENE_CMD_ID_SCENE_CMD_ID_FAST_APP_HIBOARD_PERSONAL_RECOMM         SCENE_CMD_ID = 415
	SCENE_CMD_ID_SCENE_CMD_ID_ALLIANCE_AD_CPC                          SCENE_CMD_ID = 450 //联盟广告cpc -- 周群
	SCENE_CMD_ID_SCENE_CMD_ID_AD_ALLIANCE_CPD                          SCENE_CMD_ID = 451 //广告联盟CPD -- 肖明睿
	SCENE_CMD_ID_SCENE_CMD_ID_INFO_FLOW_OCPC                           SCENE_CMD_ID = 452 //信息流 -- 王宇宾
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DETAIL_LIST      SCENE_CMD_ID = 501 //外销商店详情页  --邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_UPDATE_LIST      SCENE_CMD_ID = 502 //外销商店更新页  --邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DOWNLOAD_MANAGER SCENE_CMD_ID = 503 //外销商店下载管理页  --邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_INSTALL_RECOMM   SCENE_CMD_ID = 504 //外销商店安装推荐  --邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_CLASSIFY_LIST           SCENE_CMD_ID = 505 // 外销商店分类榜单--邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_NEW_LIST                SCENE_CMD_ID = 506 //外销商店new榜单--邹宇
	SCENE_CMD_ID_SCENE_CMD_ID_FOREIGN_APPSTORE_SPECIAL_PAGE            SCENE_CMD_ID = 507 //外销商店个性化页面--邹宇
)

// Enum value maps for SCENE_CMD_ID.
var (
	SCENE_CMD_ID_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "SCENE_CMD_ID_INFORMATION_FLOW",
		2:   "SCENE_CMD_ID_DOWNLOAD_RECOM",
		3:   "SCENE_CMD_ID_APPSTORE_SEARCH_ASSOCIATE",
		4:   "SCENE_CMD_ID_APPSTORE_SEARCH_CPD_LIST",
		5:   "SCENE_CMD_ID_BROWSER_SEARCH",
		6:   "SCENE_CMD_ID_APPSTORE_DOWNLOAD_BEROFE_AFTER",
		7:   "SCENE_CMD_ID_BROWSER_SITE",
		12:  "SCENE_CMD_ID_APPSTORE_HOME_RECOMM",
		19:  "SCENE_CMD_ID_THEME_ENTRANCE_RECOMMEND",
		28:  "SCENE_CMD_ID_GAMECENTER_CONTENT_DETAIL_RECOMM",
		50:  "SCENE_CMD_ID_ITHEME_THEME_LIST_PAGE_RECOMM",
		51:  "SCENE_CMD_ID_ITHEME_FONT_LIST_PAGE_RECOMM",
		52:  "SCENE_CMD_ID_ITHEME_THEME_COLUMN_RECOMM",
		53:  "SCENE_CMD_ID_SYSTEM_SETTING_THEME_RECOMM",
		54:  "SCENE_CMD_ID_ITHEME_DETAIL_PAGE_DOWNLOAD_AFTER",
		55:  "SCENE_CMD_ID_ITHEME_FONT_COLUMN_RECOMM",
		56:  "SCENE_CMD_ID_ITHEME_SEARCH_NO_RESULT",
		57:  "SCENE_CMD_ID_MINUS_ONE_THEME_RECOMM",
		58:  "SCENE_CMD_ID_ITHEME_THEME_COLUMN_MORE_RECOMM",
		59:  "SCENE_CMD_ID_ITHEME_WALLPAPER_LIST_PAGE_RECOMM",
		60:  "SCENE_CMD_ID_ITHEME_UNLOCK_LIST_PAGE_RECOMM",
		61:  "SCENE_CMD_ID_ITHEME_UNLOCK_COLUMN_RECOMM",
		62:  "SCENE_CMD_ID_ITHEME_ALLSCENE_BANNER_RECOMM",
		102: "SCENE_CMD_ID_APPSTORE_SEARCH_RECOMM_LIST",
		104: "SCENE_CMD_ID_APPSTORE_RECOMM_DOWNLOAD",
		105: "SCENE_CMD_ID_APPSTORE_CPD_DOWNLOAD",
		106: "SCENE_CMD_ID_APPSTORE_LIST_GAME_SEARCH",
		107: "SCENE_CMD_ID_APPSTORE_ASSOCIATE_GAME_SEARCH",
		108: "SCENE_CMD_ID_APPSTORE_SEARCH_BROADCAST_WORD",
		109: "SCENE_CMD_ID_APPSTORE_APP_SEARCH_HOT_WORD",
		110: "SCENE_CMD_ID_APPSTORE_GAME_SEARCH_HOT_WORD",
		111: "SCENE_CMD_ID_APPSTORE_DETAIL_BEFOR_DOWNLOAD",
		112: "SCENE_CMD_ID_APPSTORE_DETAIL_AFTER_DOWNLOAD",
		113: "SCENE_CMD_ID_APPSTORE_FULL_SCENE",
		114: "SCENE_CMD_ID_APPSTORE_CPD_AFTER_DOWNLOAD",
		115: "SCENE_CMD_ID_APPSTORE_CPD_LIST_GAME_SEARCH",
		116: "SCENE_CMD_ID_APPSTORE_CPD_ASSOCIATE_GAME_SEARCH",
		117: "SCENE_CMD_ID_APPSTORE_SEARCH_LIST_CPD_SEARCH",
		118: "SCENE_CMD_ID_APPSTORE_DOWNLOAD_AFTER",
		119: "SCENE_CMD_ID_APPSTORE_LY_LIST_GAME_SEARCH",
		120: "SCENE_CMD_ID_APPSTORE_LY_ASSOCIATE_GAME_SEARCH",
		121: "SCENE_CMD_ID_APPSTORE_UPDATE_PAGE",
		122: "SCENE_CMD_ID_APPSTORE_AFTER_UPDATE",
		123: "SCENE_CMD_ID_APPSTORE_NECESS_INSTALL",
		124: "SCENE_CMD_ID_APPSTORE_DOWNLOAD_MANAGE",
		125: "SCENE_CMD_ID_APPSTORE_SEARCH_ACTIVE",
		126: "SCENE_CMD_ID_APPSOTRE_SEARCH_NO_RESULT_RECOMM",
		127: "SCENE_CMD_ID_APPSTORE_APP_TAG",
		128: "SCENE_CMD_ID_APPSOTRE_TAG_APPLIST",
		200: "SCENE_CMD_ID_H5_HOMEPAGE_RECOMM",
		201: "SCENE_CMD_ID_H5_SPECIALPAGE_RECOMM",
		202: "SCENE_CMD_ID_H5_HOT_SEARCH_INSTALLATION",
		203: "SCENE_CMD_ID_H5_SEARCH_RESULT_PAGE",
		204: "SCENE_CMD_ID_H5_ASSOCIATIVE_WORD_SEARCH",
		205: "SCENE_CMD_ID_H5_SEARCH_HOT_WORDS",
		206: "SCENE_CMD_ID_H5_DETAILS_PAGE_BEFORE_DOWNLOAD_RECOMM",
		207: "SCENE_CMD_ID_H5_DETAILS_PAGE_AFTER_DOWNLOAD_RECOMM",
		301: "SCENE_CMD_ID_IMUSIC_PLAYLIST_CHANGE",
		302: "SCENE_CMD_ID_IMUSIC_PLAYLIST_RECOMM",
		303: "SCENE_CMD_ID_IMUSIC_EVERYSONG_RECOMM",
		304: "SCENE_CMD_ID_IMUSIC_FMFIRST_RECOMM",
		305: "SCENE_CMD_ID_IMUSIC_FMSECOND_RECOMM",
		306: "SCENE_CMD_ID_IMUSIC_FMONLINE_RECOMM",
		307: "SCENE_CMD_ID_IMUSIC_EXCLUSIVE_RECOMM",
		308: "SCENE_CMD_ID_IMUSIC_EXCLUSIVE_CHANGE",
		309: "SCENE_CMD_ID_IMUSIC_FMCOLUMN_RECOMM",
		351: "SCENE_CMD_ID_GAMECENTER_LIST_SEARCH",
		352: "SCENE_CMD_ID_GAMECENTER_ASSOCIATE_SEARCH",
		353: "SCENE_CMD_ID_GAMECENTER_FORUM_HOME_RECOMM",
		354: "SCENE_CMD_ID_GAMECENTER_CPD_LIST_SEARCH",
		355: "SCENE_CMD_ID_GAMECENTER_CPD_ASSOCIATE_SEARCH",
		356: "SCENE_CMD_ID_GAMECENTER_CTR_PREDICT",
		357: "SCENE_CMD_ID_GAMECENTER_LY_LIST_SEARCH",
		358: "SCENE_CMD_ID_GAMECENTER_LY_ASSOCIATE_SEARCH",
		359: "SCENE_CMD_ID_GAMECENTER_RECOMMEND",
		360: "SCENE_CMD_ID_GAMECENTER_SEARCH_RECOM",
		361: "SCENE_CMD_ID_GAMECENTER_SEARCH_LIST",
		362: "SCENE_CMD_ID_GAMECENTER_GAME_DIV",
		363: "SCENE_CMD_ID_GAMECENTER_NETGAME_DIV",
		364: "SCENE_CMD_ID_GAMECENTER_TOP_HOT",
		365: "SCENE_CMD_ID_GAMECENTER_TOP_GAME",
		366: "SCENE_CMD_ID_GAMECENTER_TOP_NETGAME",
		367: "SCENE_CMD_ID_GAMECENTER_TOP_NEWGAME",
		368: "SCENE_CMD_ID_GAMECENTER_GAME_DETAIL",
		369: "SCENE_CMD_ID_GAMECENTER_CATEGORY",
		370: "SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_OUT",
		371: "SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_LIST",
		372: "SCENE_CMD_ID_GAMECENTER_HOT_DIALOG_APP",
		373: "SCENE_CMD_ID_GAMECENTER_DOWNLOAD_MANAGEMENT_REC",
		374: "SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_OUT",
		375: "SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_LIST",
		376: "SCENE_CMD_ID_GAMECENTER_DOWNLOAD_AFTER",
		377: "SCENE_CMD_ID_GAMECENTER_GAME_BBS",
		400: "SCENE_CMD_ID_LOCKSCREEN_JOYPICTURE_RECOMM",
		410: "SCENE_CMD_ID_QUICK_APP_SEARCH_PAGE_SEARCH",
		411: "SCENE_CMD_ID_QUICK_APP_SECOND_LIST_RECOMM",
		412: "SCENE_CMD_ID_QUICK_APP_HOMEPAGE_RECOMM",
		413: "SCENE_CMD_ID_FAST_APP_SEARCH_BOX_GUESS_LIKE_RECOMM",
		414: "SCENE_CMD_ID_FAST_APP_SEARCH_BOX_HOT_WORD_RECOMM",
		415: "SCENE_CMD_ID_FAST_APP_HIBOARD_PERSONAL_RECOMM",
		450: "SCENE_CMD_ID_ALLIANCE_AD_CPC",
		451: "SCENE_CMD_ID_AD_ALLIANCE_CPD",
		452: "SCENE_CMD_ID_INFO_FLOW_OCPC",
		501: "SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DETAIL_LIST",
		502: "SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_UPDATE_LIST",
		503: "SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DOWNLOAD_MANAGER",
		504: "SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_INSTALL_RECOMM",
		505: "SCENE_CMD_ID_FOREIGN_APPSTORE_CLASSIFY_LIST",
		506: "SCENE_CMD_ID_FOREIGN_APPSTORE_NEW_LIST",
		507: "SCENE_CMD_ID_FOREIGN_APPSTORE_SPECIAL_PAGE",
	}
	SCENE_CMD_ID_value = map[string]int32{
		"UNKNOWN":                                               0,
		"SCENE_CMD_ID_INFORMATION_FLOW":                         1,
		"SCENE_CMD_ID_DOWNLOAD_RECOM":                           2,
		"SCENE_CMD_ID_APPSTORE_SEARCH_ASSOCIATE":                3,
		"SCENE_CMD_ID_APPSTORE_SEARCH_CPD_LIST":                 4,
		"SCENE_CMD_ID_BROWSER_SEARCH":                           5,
		"SCENE_CMD_ID_APPSTORE_DOWNLOAD_BEROFE_AFTER":           6,
		"SCENE_CMD_ID_BROWSER_SITE":                             7,
		"SCENE_CMD_ID_APPSTORE_HOME_RECOMM":                     12,
		"SCENE_CMD_ID_THEME_ENTRANCE_RECOMMEND":                 19,
		"SCENE_CMD_ID_GAMECENTER_CONTENT_DETAIL_RECOMM":         28,
		"SCENE_CMD_ID_ITHEME_THEME_LIST_PAGE_RECOMM":            50,
		"SCENE_CMD_ID_ITHEME_FONT_LIST_PAGE_RECOMM":             51,
		"SCENE_CMD_ID_ITHEME_THEME_COLUMN_RECOMM":               52,
		"SCENE_CMD_ID_SYSTEM_SETTING_THEME_RECOMM":              53,
		"SCENE_CMD_ID_ITHEME_DETAIL_PAGE_DOWNLOAD_AFTER":        54,
		"SCENE_CMD_ID_ITHEME_FONT_COLUMN_RECOMM":                55,
		"SCENE_CMD_ID_ITHEME_SEARCH_NO_RESULT":                  56,
		"SCENE_CMD_ID_MINUS_ONE_THEME_RECOMM":                   57,
		"SCENE_CMD_ID_ITHEME_THEME_COLUMN_MORE_RECOMM":          58,
		"SCENE_CMD_ID_ITHEME_WALLPAPER_LIST_PAGE_RECOMM":        59,
		"SCENE_CMD_ID_ITHEME_UNLOCK_LIST_PAGE_RECOMM":           60,
		"SCENE_CMD_ID_ITHEME_UNLOCK_COLUMN_RECOMM":              61,
		"SCENE_CMD_ID_ITHEME_ALLSCENE_BANNER_RECOMM":            62,
		"SCENE_CMD_ID_APPSTORE_SEARCH_RECOMM_LIST":              102,
		"SCENE_CMD_ID_APPSTORE_RECOMM_DOWNLOAD":                 104,
		"SCENE_CMD_ID_APPSTORE_CPD_DOWNLOAD":                    105,
		"SCENE_CMD_ID_APPSTORE_LIST_GAME_SEARCH":                106,
		"SCENE_CMD_ID_APPSTORE_ASSOCIATE_GAME_SEARCH":           107,
		"SCENE_CMD_ID_APPSTORE_SEARCH_BROADCAST_WORD":           108,
		"SCENE_CMD_ID_APPSTORE_APP_SEARCH_HOT_WORD":             109,
		"SCENE_CMD_ID_APPSTORE_GAME_SEARCH_HOT_WORD":            110,
		"SCENE_CMD_ID_APPSTORE_DETAIL_BEFOR_DOWNLOAD":           111,
		"SCENE_CMD_ID_APPSTORE_DETAIL_AFTER_DOWNLOAD":           112,
		"SCENE_CMD_ID_APPSTORE_FULL_SCENE":                      113,
		"SCENE_CMD_ID_APPSTORE_CPD_AFTER_DOWNLOAD":              114,
		"SCENE_CMD_ID_APPSTORE_CPD_LIST_GAME_SEARCH":            115,
		"SCENE_CMD_ID_APPSTORE_CPD_ASSOCIATE_GAME_SEARCH":       116,
		"SCENE_CMD_ID_APPSTORE_SEARCH_LIST_CPD_SEARCH":          117,
		"SCENE_CMD_ID_APPSTORE_DOWNLOAD_AFTER":                  118,
		"SCENE_CMD_ID_APPSTORE_LY_LIST_GAME_SEARCH":             119,
		"SCENE_CMD_ID_APPSTORE_LY_ASSOCIATE_GAME_SEARCH":        120,
		"SCENE_CMD_ID_APPSTORE_UPDATE_PAGE":                     121,
		"SCENE_CMD_ID_APPSTORE_AFTER_UPDATE":                    122,
		"SCENE_CMD_ID_APPSTORE_NECESS_INSTALL":                  123,
		"SCENE_CMD_ID_APPSTORE_DOWNLOAD_MANAGE":                 124,
		"SCENE_CMD_ID_APPSTORE_SEARCH_ACTIVE":                   125,
		"SCENE_CMD_ID_APPSOTRE_SEARCH_NO_RESULT_RECOMM":         126,
		"SCENE_CMD_ID_APPSTORE_APP_TAG":                         127,
		"SCENE_CMD_ID_APPSOTRE_TAG_APPLIST":                     128,
		"SCENE_CMD_ID_H5_HOMEPAGE_RECOMM":                       200,
		"SCENE_CMD_ID_H5_SPECIALPAGE_RECOMM":                    201,
		"SCENE_CMD_ID_H5_HOT_SEARCH_INSTALLATION":               202,
		"SCENE_CMD_ID_H5_SEARCH_RESULT_PAGE":                    203,
		"SCENE_CMD_ID_H5_ASSOCIATIVE_WORD_SEARCH":               204,
		"SCENE_CMD_ID_H5_SEARCH_HOT_WORDS":                      205,
		"SCENE_CMD_ID_H5_DETAILS_PAGE_BEFORE_DOWNLOAD_RECOMM":   206,
		"SCENE_CMD_ID_H5_DETAILS_PAGE_AFTER_DOWNLOAD_RECOMM":    207,
		"SCENE_CMD_ID_IMUSIC_PLAYLIST_CHANGE":                   301,
		"SCENE_CMD_ID_IMUSIC_PLAYLIST_RECOMM":                   302,
		"SCENE_CMD_ID_IMUSIC_EVERYSONG_RECOMM":                  303,
		"SCENE_CMD_ID_IMUSIC_FMFIRST_RECOMM":                    304,
		"SCENE_CMD_ID_IMUSIC_FMSECOND_RECOMM":                   305,
		"SCENE_CMD_ID_IMUSIC_FMONLINE_RECOMM":                   306,
		"SCENE_CMD_ID_IMUSIC_EXCLUSIVE_RECOMM":                  307,
		"SCENE_CMD_ID_IMUSIC_EXCLUSIVE_CHANGE":                  308,
		"SCENE_CMD_ID_IMUSIC_FMCOLUMN_RECOMM":                   309,
		"SCENE_CMD_ID_GAMECENTER_LIST_SEARCH":                   351,
		"SCENE_CMD_ID_GAMECENTER_ASSOCIATE_SEARCH":              352,
		"SCENE_CMD_ID_GAMECENTER_FORUM_HOME_RECOMM":             353,
		"SCENE_CMD_ID_GAMECENTER_CPD_LIST_SEARCH":               354,
		"SCENE_CMD_ID_GAMECENTER_CPD_ASSOCIATE_SEARCH":          355,
		"SCENE_CMD_ID_GAMECENTER_CTR_PREDICT":                   356,
		"SCENE_CMD_ID_GAMECENTER_LY_LIST_SEARCH":                357,
		"SCENE_CMD_ID_GAMECENTER_LY_ASSOCIATE_SEARCH":           358,
		"SCENE_CMD_ID_GAMECENTER_RECOMMEND":                     359,
		"SCENE_CMD_ID_GAMECENTER_SEARCH_RECOM":                  360,
		"SCENE_CMD_ID_GAMECENTER_SEARCH_LIST":                   361,
		"SCENE_CMD_ID_GAMECENTER_GAME_DIV":                      362,
		"SCENE_CMD_ID_GAMECENTER_NETGAME_DIV":                   363,
		"SCENE_CMD_ID_GAMECENTER_TOP_HOT":                       364,
		"SCENE_CMD_ID_GAMECENTER_TOP_GAME":                      365,
		"SCENE_CMD_ID_GAMECENTER_TOP_NETGAME":                   366,
		"SCENE_CMD_ID_GAMECENTER_TOP_NEWGAME":                   367,
		"SCENE_CMD_ID_GAMECENTER_GAME_DETAIL":                   368,
		"SCENE_CMD_ID_GAMECENTER_CATEGORY":                      369,
		"SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_OUT":             370,
		"SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_LIST":            371,
		"SCENE_CMD_ID_GAMECENTER_HOT_DIALOG_APP":                372,
		"SCENE_CMD_ID_GAMECENTER_DOWNLOAD_MANAGEMENT_REC":       373,
		"SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_OUT":                374,
		"SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_LIST":               375,
		"SCENE_CMD_ID_GAMECENTER_DOWNLOAD_AFTER":                376,
		"SCENE_CMD_ID_GAMECENTER_GAME_BBS":                      377,
		"SCENE_CMD_ID_LOCKSCREEN_JOYPICTURE_RECOMM":             400,
		"SCENE_CMD_ID_QUICK_APP_SEARCH_PAGE_SEARCH":             410,
		"SCENE_CMD_ID_QUICK_APP_SECOND_LIST_RECOMM":             411,
		"SCENE_CMD_ID_QUICK_APP_HOMEPAGE_RECOMM":                412,
		"SCENE_CMD_ID_FAST_APP_SEARCH_BOX_GUESS_LIKE_RECOMM":    413,
		"SCENE_CMD_ID_FAST_APP_SEARCH_BOX_HOT_WORD_RECOMM":      414,
		"SCENE_CMD_ID_FAST_APP_HIBOARD_PERSONAL_RECOMM":         415,
		"SCENE_CMD_ID_ALLIANCE_AD_CPC":                          450,
		"SCENE_CMD_ID_AD_ALLIANCE_CPD":                          451,
		"SCENE_CMD_ID_INFO_FLOW_OCPC":                           452,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DETAIL_LIST":      501,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_UPDATE_LIST":      502,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DOWNLOAD_MANAGER": 503,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_INSTALL_RECOMM":   504,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_CLASSIFY_LIST":           505,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_NEW_LIST":                506,
		"SCENE_CMD_ID_FOREIGN_APPSTORE_SPECIAL_PAGE":            507,
	}
)

func (x SCENE_CMD_ID) Enum() *SCENE_CMD_ID {
	p := new(SCENE_CMD_ID)
	*p = x
	return p
}

func (x SCENE_CMD_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCENE_CMD_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_recommend_proto_enumTypes[0].Descriptor()
}

func (SCENE_CMD_ID) Type() protoreflect.EnumType {
	return &file_recommend_proto_enumTypes[0]
}

func (x SCENE_CMD_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCENE_CMD_ID.Descriptor instead.
func (SCENE_CMD_ID) EnumDescriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{0}
}

type AllTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VecTestInfo []*AlgMultiTestInfo `protobuf:"bytes,1,rep,name=vecTestInfo,proto3" json:"vecTestInfo,omitempty"`
	DebugError  string              `protobuf:"bytes,2,opt,name=debug_error,json=debugError,proto3" json:"debug_error,omitempty"`
}

func (x *AllTestInfo) Reset() {
	*x = AllTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTestInfo) ProtoMessage() {}

func (x *AllTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTestInfo.ProtoReflect.Descriptor instead.
func (*AllTestInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{0}
}

func (x *AllTestInfo) GetVecTestInfo() []*AlgMultiTestInfo {
	if x != nil {
		return x.VecTestInfo
	}
	return nil
}

func (x *AllTestInfo) GetDebugError() string {
	if x != nil {
		return x.DebugError
	}
	return ""
}

type PredictorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   string  `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ModelName  string  `protobuf:"bytes,2,opt,name=modelName,proto3" json:"modelName,omitempty"`
	PowerRatio float64 `protobuf:"fixed64,3,opt,name=powerRatio,proto3" json:"powerRatio,omitempty"`
}

func (x *PredictorInfo) Reset() {
	*x = PredictorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictorInfo) ProtoMessage() {}

func (x *PredictorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictorInfo.ProtoReflect.Descriptor instead.
func (*PredictorInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{1}
}

func (x *PredictorInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PredictorInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *PredictorInfo) GetPowerRatio() float64 {
	if x != nil {
		return x.PowerRatio
	}
	return 0
}

//场景算法信息
type SceneSubAlgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankAlgs   []string         `protobuf:"bytes,1,rep,name=rankAlgs,proto3" json:"rankAlgs,omitempty"`
	RecallAlgs []string         `protobuf:"bytes,2,rep,name=recallAlgs,proto3" json:"recallAlgs,omitempty"`
	Predictors []*PredictorInfo `protobuf:"bytes,3,rep,name=predictors,proto3" json:"predictors,omitempty"`
}

func (x *SceneSubAlgInfo) Reset() {
	*x = SceneSubAlgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneSubAlgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneSubAlgInfo) ProtoMessage() {}

func (x *SceneSubAlgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneSubAlgInfo.ProtoReflect.Descriptor instead.
func (*SceneSubAlgInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{2}
}

func (x *SceneSubAlgInfo) GetRankAlgs() []string {
	if x != nil {
		return x.RankAlgs
	}
	return nil
}

func (x *SceneSubAlgInfo) GetRecallAlgs() []string {
	if x != nil {
		return x.RecallAlgs
	}
	return nil
}

func (x *SceneSubAlgInfo) GetPredictors() []*PredictorInfo {
	if x != nil {
		return x.Predictors
	}
	return nil
}

type SeviceSceneInsulateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEffect          bool   `protobuf:"varint,1,opt,name=isEffect,proto3" json:"isEffect,omitempty"`                  //服务场景分离是否生效
	ServiceName       string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`             //服务名
	ServiceNameSuffix string `protobuf:"bytes,3,opt,name=serviceNameSuffix,proto3" json:"serviceNameSuffix,omitempty"` //服务名后缀
}

func (x *SeviceSceneInsulateInfo) Reset() {
	*x = SeviceSceneInsulateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeviceSceneInsulateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeviceSceneInsulateInfo) ProtoMessage() {}

func (x *SeviceSceneInsulateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeviceSceneInsulateInfo.ProtoReflect.Descriptor instead.
func (*SeviceSceneInsulateInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{3}
}

func (x *SeviceSceneInsulateInfo) GetIsEffect() bool {
	if x != nil {
		return x.IsEffect
	}
	return false
}

func (x *SeviceSceneInsulateInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SeviceSceneInsulateInfo) GetServiceNameSuffix() string {
	if x != nil {
		return x.ServiceNameSuffix
	}
	return ""
}

//Begin---------用户相关
//设备相关信息
//目的：用于个性化推荐
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndroidId     string  `protobuf:"bytes,1,opt,name=androidId,proto3" json:"androidId,omitempty"`
	Imei          string  `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	SuperUser     int64   `protobuf:"varint,3,opt,name=superUser,proto3" json:"superUser,omitempty"`             //jail break/root
	Language      string  `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`                //语言
	Manufacturer  string  `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`        //手机厂商 htc, LG, ...
	ModelName     string  `protobuf:"bytes,6,opt,name=modelName,proto3" json:"modelName,omitempty"`              //手机型号 Nexus 5, ...
	OsVersion     string  `protobuf:"bytes,7,opt,name=osVersion,proto3" json:"osVersion,omitempty"`              //安卓版本号 4.4.1
	Resolution    string  `protobuf:"bytes,8,opt,name=resolution,proto3" json:"resolution,omitempty"`            //400x800, 400*600
	MacAddr       string  `protobuf:"bytes,9,opt,name=macAddr,proto3" json:"macAddr,omitempty"`                  //34:34:f3:...
	ClientVersion string  `protobuf:"bytes,10,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`     //客户端版本号 TMA_411_DEV/040411&NA/040411&2.3.4_10_1&20_15_14&samsung_GTS5570&NA&NA&V3
	AddAttribute  int64   `protobuf:"varint,11,opt,name=addAttribute,proto3" json:"addAttribute,omitempty"`      //设备附加属性
	PreferInfos   []int32 `protobuf:"varint,12,rep,packed,name=preferInfos,proto3" json:"preferInfos,omitempty"` //偏好列表
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfo) GetAndroidId() string {
	if x != nil {
		return x.AndroidId
	}
	return ""
}

func (x *DeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfo) GetSuperUser() int64 {
	if x != nil {
		return x.SuperUser
	}
	return 0
}

func (x *DeviceInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *DeviceInfo) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *DeviceInfo) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *DeviceInfo) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *DeviceInfo) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceInfo) GetAddAttribute() int64 {
	if x != nil {
		return x.AddAttribute
	}
	return 0
}

func (x *DeviceInfo) GetPreferInfos() []int32 {
	if x != nil {
		return x.PreferInfos
	}
	return nil
}

//位置相关信息
//目的：LBS相关推荐
type LocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City      string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`           //城市
	Longitude string `protobuf:"bytes,2,opt,name=longitude,proto3" json:"longitude,omitempty"` //经纬度
	Timezone  string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`   //时区
}

func (x *LocationInfo) Reset() {
	*x = LocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationInfo) ProtoMessage() {}

func (x *LocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationInfo.ProtoReflect.Descriptor instead.
func (*LocationInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{5}
}

func (x *LocationInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *LocationInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *LocationInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

//网络相关信息
//目的：网络相关过滤
type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi            string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`                       //sim卡号
	NetworkType     string `protobuf:"bytes,2,opt,name=networkType,proto3" json:"networkType,omitempty"`         //wifi, 2g, 3g...
	NetworkOperator string `protobuf:"bytes,3,opt,name=networkOperator,proto3" json:"networkOperator,omitempty"` //运营商
	PhoneNumber     string `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`         //手机号
	ClientIp        string `protobuf:"bytes,5,opt,name=clientIp,proto3" json:"clientIp,omitempty"`               //客户端用户的ip
	WifiSsid        string `protobuf:"bytes,6,opt,name=wifiSsid,proto3" json:"wifiSsid,omitempty"`               //wifi名(Vivo-Freewifi)
	WifiBssid       string `protobuf:"bytes,7,opt,name=wifiBssid,proto3" json:"wifiBssid,omitempty"`             //wifi路由器的mac地址
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkInfo) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *NetworkInfo) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *NetworkInfo) GetNetworkOperator() string {
	if x != nil {
		return x.NetworkOperator
	}
	return ""
}

func (x *NetworkInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *NetworkInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *NetworkInfo) GetWifiSsid() string {
	if x != nil {
		return x.WifiSsid
	}
	return ""
}

func (x *NetworkInfo) GetWifiBssid() string {
	if x != nil {
		return x.WifiBssid
	}
	return ""
}

//Item相关
type AdItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId     string            `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`                                                                                         // 广告用于跟踪计费的traceid
	AdTxt       string            `protobuf:"bytes,2,opt,name=adTxt,proto3" json:"adTxt,omitempty"`                                                                                             // 广告语
	AdType      int32             `protobuf:"varint,3,opt,name=adType,proto3" json:"adType,omitempty"`                                                                                          // 广告类型：1、普通网址 2、应用下载
	StartTime   int32             `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                    // 广告开始时间
	EndTime     int32             `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                                                                                        //广告结束时间
	Price       float64           `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                                                                                           // 广告的价格
	CostType    int32             `protobuf:"varint,7,opt,name=costType,proto3" json:"costType,omitempty"`                                                                                      // 区分广告的计费类型，如是否cpt
	IdeaMap     map[string]string `protobuf:"bytes,8,rep,name=ideaMap,proto3" json:"ideaMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 广告创意信息
	CurrentIdea string            `protobuf:"bytes,9,opt,name=currentIdea,proto3" json:"currentIdea,omitempty"`                                                                                 //当前创意
	PricingType int32             `protobuf:"varint,10,opt,name=pricingType,proto3" json:"pricingType,omitempty"`                                                                               //计费类型: 1、表示cpc；2、表示 ocpc; 3、表示cpd；4、表示 ocpd;
	Creativeid  int64             `protobuf:"varint,11,opt,name=creativeid,proto3" json:"creativeid,omitempty"`                                                                                 //创意id，与appid的关系是多对一
}

func (x *AdItemInfo) Reset() {
	*x = AdItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdItemInfo) ProtoMessage() {}

func (x *AdItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdItemInfo.ProtoReflect.Descriptor instead.
func (*AdItemInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{7}
}

func (x *AdItemInfo) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *AdItemInfo) GetAdTxt() string {
	if x != nil {
		return x.AdTxt
	}
	return ""
}

func (x *AdItemInfo) GetAdType() int32 {
	if x != nil {
		return x.AdType
	}
	return 0
}

func (x *AdItemInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdItemInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AdItemInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AdItemInfo) GetCostType() int32 {
	if x != nil {
		return x.CostType
	}
	return 0
}

func (x *AdItemInfo) GetIdeaMap() map[string]string {
	if x != nil {
		return x.IdeaMap
	}
	return nil
}

func (x *AdItemInfo) GetCurrentIdea() string {
	if x != nil {
		return x.CurrentIdea
	}
	return ""
}

func (x *AdItemInfo) GetPricingType() int32 {
	if x != nil {
		return x.PricingType
	}
	return 0
}

func (x *AdItemInfo) GetCreativeid() int64 {
	if x != nil {
		return x.Creativeid
	}
	return 0
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId   string `protobuf:"bytes,1,opt,name=moduleId,proto3" json:"moduleId,omitempty"`
	ModuleType int32  `protobuf:"varint,2,opt,name=moduleType,proto3" json:"moduleType,omitempty"` //0:相关推荐 1：同标签推荐 2：同专题推荐
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{8}
}

func (x *Module) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *Module) GetModuleType() int32 {
	if x != nil {
		return x.ModuleType
	}
	return 0
}

//单个推荐信息，是server返回，也可以把这些应用交给server打分
type RecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //appid
	Score       float64           `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	RecomReason string            `protobuf:"bytes,3,opt,name=recomReason,proto3" json:"recomReason,omitempty"`  //推荐理由
	VersionCode int32             `protobuf:"varint,4,opt,name=versionCode,proto3" json:"versionCode,omitempty"` //应用的versionCode
	AdInfo      *AdItemInfo       `protobuf:"bytes,5,opt,name=adInfo,proto3" json:"adInfo,omitempty"`
	Cvr         float64           `protobuf:"fixed64,6,opt,name=cvr,proto3" json:"cvr,omitempty"`
	TraceId     string            `protobuf:"bytes,7,opt,name=traceId,proto3" json:"traceId,omitempty"`
	StrId       string            `protobuf:"bytes,8,opt,name=strId,proto3" json:"strId,omitempty"`
	Appname     string            `protobuf:"bytes,9,opt,name=appname,proto3" json:"appname,omitempty"`
	MapContext  map[string]string `protobuf:"bytes,10,rep,name=mapContext,proto3" json:"mapContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RecommendItem) Reset() {
	*x = RecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendItem) ProtoMessage() {}

func (x *RecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendItem.ProtoReflect.Descriptor instead.
func (*RecommendItem) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{9}
}

func (x *RecommendItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecommendItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecommendItem) GetRecomReason() string {
	if x != nil {
		return x.RecomReason
	}
	return ""
}

func (x *RecommendItem) GetVersionCode() int32 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *RecommendItem) GetAdInfo() *AdItemInfo {
	if x != nil {
		return x.AdInfo
	}
	return nil
}

func (x *RecommendItem) GetCvr() float64 {
	if x != nil {
		return x.Cvr
	}
	return 0
}

func (x *RecommendItem) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *RecommendItem) GetStrId() string {
	if x != nil {
		return x.StrId
	}
	return ""
}

func (x *RecommendItem) GetAppname() string {
	if x != nil {
		return x.Appname
	}
	return ""
}

func (x *RecommendItem) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

type RecommendGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                        //组id，实际场景中代表专题，分组，标签等id
	Score      float64           `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`                                                                                                 //得分
	Name       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                                     //组name
	VecItem    []*RecommendItem  `protobuf:"bytes,4,rep,name=vecItem,proto3" json:"vecItem,omitempty"`                                                                                               //group内的item列表
	MapContext map[string]string `protobuf:"bytes,5,rep,name=mapContext,proto3" json:"mapContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RecommendGroup) Reset() {
	*x = RecommendGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendGroup) ProtoMessage() {}

func (x *RecommendGroup) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendGroup.ProtoReflect.Descriptor instead.
func (*RecommendGroup) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{10}
}

func (x *RecommendGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecommendGroup) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RecommendGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecommendGroup) GetVecItem() []*RecommendItem {
	if x != nil {
		return x.VecItem
	}
	return nil
}

func (x *RecommendGroup) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

//Begin---------App定向投放相关
//年龄、收入等区间
type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerLimit float64 `protobuf:"fixed64,1,opt,name=lowerLimit,proto3" json:"lowerLimit,omitempty"` //下限
	UpperLimit float64 `protobuf:"fixed64,2,opt,name=upperLimit,proto3" json:"upperLimit,omitempty"` //上限
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{11}
}

func (x *Interval) GetLowerLimit() float64 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *Interval) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

//年龄性别参数
type AgeSexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIncludeAge bool        `protobuf:"varint,1,opt,name=isIncludeAge,proto3" json:"isIncludeAge,omitempty"` //是否使用年龄字段
	AgeInterval  []*Interval `protobuf:"bytes,2,rep,name=ageInterval,proto3" json:"ageInterval,omitempty"`    //年龄区间
	IsIncludeSex bool        `protobuf:"varint,3,opt,name=isIncludeSex,proto3" json:"isIncludeSex,omitempty"` //是否使用性别字段
	Sex          int32       `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`                   //1男2女0全部
}

func (x *AgeSexInfo) Reset() {
	*x = AgeSexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgeSexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgeSexInfo) ProtoMessage() {}

func (x *AgeSexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgeSexInfo.ProtoReflect.Descriptor instead.
func (*AgeSexInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{12}
}

func (x *AgeSexInfo) GetIsIncludeAge() bool {
	if x != nil {
		return x.IsIncludeAge
	}
	return false
}

func (x *AgeSexInfo) GetAgeInterval() []*Interval {
	if x != nil {
		return x.AgeInterval
	}
	return nil
}

func (x *AgeSexInfo) GetIsIncludeSex() bool {
	if x != nil {
		return x.IsIncludeSex
	}
	return false
}

func (x *AgeSexInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

//收入和地域参数
type IncomeCityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsIncludeIncome bool        `protobuf:"varint,1,opt,name=isIncludeIncome,proto3" json:"isIncludeIncome,omitempty"` //是否使用收入字段
	IncomeInterval  []*Interval `protobuf:"bytes,2,rep,name=incomeInterval,proto3" json:"incomeInterval,omitempty"`    //收入区间
	IsIncludeCity   bool        `protobuf:"varint,3,opt,name=isIncludeCity,proto3" json:"isIncludeCity,omitempty"`     //是否使用地域城市字段
	VecCityId       []uint32    `protobuf:"varint,4,rep,packed,name=vecCityId,proto3" json:"vecCityId,omitempty"`      //地域城市范围
}

func (x *IncomeCityInfo) Reset() {
	*x = IncomeCityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeCityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeCityInfo) ProtoMessage() {}

func (x *IncomeCityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeCityInfo.ProtoReflect.Descriptor instead.
func (*IncomeCityInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{13}
}

func (x *IncomeCityInfo) GetIsIncludeIncome() bool {
	if x != nil {
		return x.IsIncludeIncome
	}
	return false
}

func (x *IncomeCityInfo) GetIncomeInterval() []*Interval {
	if x != nil {
		return x.IncomeInterval
	}
	return nil
}

func (x *IncomeCityInfo) GetIsIncludeCity() bool {
	if x != nil {
		return x.IsIncludeCity
	}
	return false
}

func (x *IncomeCityInfo) GetVecCityId() []uint32 {
	if x != nil {
		return x.VecCityId
	}
	return nil
}

//每个app的定向信息
type RuleAppDirectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTagInfo           map[uint32]float64 `protobuf:"bytes,1,rep,name=mapTagInfo,proto3" json:"mapTagInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` //tag集合
	ExposePercent        float64            `protobuf:"fixed64,2,opt,name=exposePercent,proto3" json:"exposePercent,omitempty"`                                                                                    //曝光比
	VecInstallAppIdKai   []uint32           `protobuf:"varint,3,rep,packed,name=vecInstallAppIdKai,proto3" json:"vecInstallAppIdKai,omitempty"`                                                                    //已安装app列表
	VecUnInstallAppIdKai []uint32           `protobuf:"varint,4,rep,packed,name=vecUnInstallAppIdKai,proto3" json:"vecUnInstallAppIdKai,omitempty"`                                                                //未安装app列表
	AgeSexInfo           *AgeSexInfo        `protobuf:"bytes,5,opt,name=ageSexInfo,proto3" json:"ageSexInfo,omitempty"`                                                                                            //年龄、性别信息
	IncomeCityInfo       *IncomeCityInfo    `protobuf:"bytes,6,opt,name=incomeCityInfo,proto3" json:"incomeCityInfo,omitempty"`                                                                                    //收入、地域信息
}

func (x *RuleAppDirectInfo) Reset() {
	*x = RuleAppDirectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleAppDirectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleAppDirectInfo) ProtoMessage() {}

func (x *RuleAppDirectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleAppDirectInfo.ProtoReflect.Descriptor instead.
func (*RuleAppDirectInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{14}
}

func (x *RuleAppDirectInfo) GetMapTagInfo() map[uint32]float64 {
	if x != nil {
		return x.MapTagInfo
	}
	return nil
}

func (x *RuleAppDirectInfo) GetExposePercent() float64 {
	if x != nil {
		return x.ExposePercent
	}
	return 0
}

func (x *RuleAppDirectInfo) GetVecInstallAppIdKai() []uint32 {
	if x != nil {
		return x.VecInstallAppIdKai
	}
	return nil
}

func (x *RuleAppDirectInfo) GetVecUnInstallAppIdKai() []uint32 {
	if x != nil {
		return x.VecUnInstallAppIdKai
	}
	return nil
}

func (x *RuleAppDirectInfo) GetAgeSexInfo() *AgeSexInfo {
	if x != nil {
		return x.AgeSexInfo
	}
	return nil
}

func (x *RuleAppDirectInfo) GetIncomeCityInfo() *IncomeCityInfo {
	if x != nil {
		return x.IncomeCityInfo
	}
	return nil
}

//推荐信息
type RecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId                SCENE_CMD_ID             `protobuf:"varint,1,opt,name=sceneId,proto3,enum=so_rtrs.SCENE_CMD_ID" json:"sceneId,omitempty"`                                                               //场景定义
	SceneSubAlg            string                   `protobuf:"bytes,2,opt,name=sceneSubAlg,proto3" json:"sceneSubAlg,omitempty"`                                                                                  //目前流量还是通过二部来划分，用来标识一个场景下的子流量
	Context                string                   `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`                                                                                          //上下文信息，比如搜索的精准搜索匹配结果
	PlatformVersion        int32                    `protobuf:"varint,4,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`                                                                         //平台版本号：比如应用商店、浏览器、游戏中心
	VecItem                []*RecommendItem         `protobuf:"bytes,5,rep,name=vecItem,proto3" json:"vecItem,omitempty"`                                                                                          //用于使用推荐给出的顺序
	MapItem                map[int64]*RecommendItem `protobuf:"bytes,6,rep,name=mapItem,proto3" json:"mapItem,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //用于使用appid做key，返回数据信息，与vecItem不同时存在
	TraceId                string                   `protobuf:"bytes,7,opt,name=traceId,proto3" json:"traceId,omitempty"`
	TotalResult            int32                    `protobuf:"varint,8,opt,name=totalResult,proto3" json:"totalResult,omitempty"`                                                                                       //总条数，推荐侧返回的可展示的item总数
	IndexBegin             int32                    `protobuf:"varint,9,opt,name=indexBegin,proto3" json:"indexBegin,omitempty"`                                                                                         //请求起始条数，从0开始
	IndexEnd               int32                    `protobuf:"varint,10,opt,name=indexEnd,proto3" json:"indexEnd,omitempty"`                                                                                            //请求结束位置
	Query                  string                   `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`                                                                                                   //查询词
	MapContext             map[string]string        `protobuf:"bytes,12,rep,name=mapContext,proto3" json:"mapContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //上下文信息，比如搜索的精准搜索匹配结果
	PositionId             int64                    `protobuf:"varint,13,opt,name=positionId,proto3" json:"positionId,omitempty"`                                                                                        // 广告位ID(int64)
	ValueModifyParamA      float64                  `protobuf:"fixed64,14,opt,name=valueModifyParamA,proto3" json:"valueModifyParamA,omitempty"`                                                                         // pctr*（a+bid^t）*factor 中的参数a
	ValueModifyParamT      float64                  `protobuf:"fixed64,15,opt,name=valueModifyParamT,proto3" json:"valueModifyParamT,omitempty"`                                                                         // pctr*（a+bid^t）*factor 中的参数t
	ValueModifyParamFactor float64                  `protobuf:"fixed64,16,opt,name=valueModifyParamFactor,proto3" json:"valueModifyParamFactor,omitempty"`                                                               // pctr*（a+bid^t）*factor 中的参数factor
	SubAlgInfo             *SceneSubAlgInfo         `protobuf:"bytes,17,opt,name=subAlgInfo,proto3" json:"subAlgInfo,omitempty"`
	SceneInfo              string                   `protobuf:"bytes,18,opt,name=sceneInfo,proto3" json:"sceneInfo,omitempty"`            //场景说明以及子场景的标注
	PositionIdStr          string                   `protobuf:"bytes,19,opt,name=positionIdStr,proto3" json:"positionIdStr,omitempty"`    // 广告位ID(string)
	WordSeg                string                   `protobuf:"bytes,20,opt,name=word_seg,json=wordSeg,proto3" json:"word_seg,omitempty"` //query分词结果，以英文逗号分隔的分词结果
	RefreshTimes           int32                    `protobuf:"varint,21,opt,name=refreshTimes,proto3" json:"refreshTimes,omitempty"`
	Module                 *Module                  `protobuf:"bytes,22,opt,name=module,proto3" json:"module,omitempty"`     //所属模块
	VecGroup               []*RecommendGroup        `protobuf:"bytes,23,rep,name=vecGroup,proto3" json:"vecGroup,omitempty"` //用于使用推荐给出的组的顺序
}

func (x *RecommendInfo) Reset() {
	*x = RecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendInfo) ProtoMessage() {}

func (x *RecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendInfo.ProtoReflect.Descriptor instead.
func (*RecommendInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{15}
}

func (x *RecommendInfo) GetSceneId() SCENE_CMD_ID {
	if x != nil {
		return x.SceneId
	}
	return SCENE_CMD_ID_UNKNOWN
}

func (x *RecommendInfo) GetSceneSubAlg() string {
	if x != nil {
		return x.SceneSubAlg
	}
	return ""
}

func (x *RecommendInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RecommendInfo) GetPlatformVersion() int32 {
	if x != nil {
		return x.PlatformVersion
	}
	return 0
}

func (x *RecommendInfo) GetVecItem() []*RecommendItem {
	if x != nil {
		return x.VecItem
	}
	return nil
}

func (x *RecommendInfo) GetMapItem() map[int64]*RecommendItem {
	if x != nil {
		return x.MapItem
	}
	return nil
}

func (x *RecommendInfo) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *RecommendInfo) GetTotalResult() int32 {
	if x != nil {
		return x.TotalResult
	}
	return 0
}

func (x *RecommendInfo) GetIndexBegin() int32 {
	if x != nil {
		return x.IndexBegin
	}
	return 0
}

func (x *RecommendInfo) GetIndexEnd() int32 {
	if x != nil {
		return x.IndexEnd
	}
	return 0
}

func (x *RecommendInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RecommendInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

func (x *RecommendInfo) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *RecommendInfo) GetValueModifyParamA() float64 {
	if x != nil {
		return x.ValueModifyParamA
	}
	return 0
}

func (x *RecommendInfo) GetValueModifyParamT() float64 {
	if x != nil {
		return x.ValueModifyParamT
	}
	return 0
}

func (x *RecommendInfo) GetValueModifyParamFactor() float64 {
	if x != nil {
		return x.ValueModifyParamFactor
	}
	return 0
}

func (x *RecommendInfo) GetSubAlgInfo() *SceneSubAlgInfo {
	if x != nil {
		return x.SubAlgInfo
	}
	return nil
}

func (x *RecommendInfo) GetSceneInfo() string {
	if x != nil {
		return x.SceneInfo
	}
	return ""
}

func (x *RecommendInfo) GetPositionIdStr() string {
	if x != nil {
		return x.PositionIdStr
	}
	return ""
}

func (x *RecommendInfo) GetWordSeg() string {
	if x != nil {
		return x.WordSeg
	}
	return ""
}

func (x *RecommendInfo) GetRefreshTimes() int32 {
	if x != nil {
		return x.RefreshTimes
	}
	return 0
}

func (x *RecommendInfo) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *RecommendInfo) GetVecGroup() []*RecommendGroup {
	if x != nil {
		return x.VecGroup
	}
	return nil
}

//Begin---------------接口
//请求参数
type RecomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device               *DeviceInfo                         `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Location             *LocationInfo                       `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Network              *NetworkInfo                        `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Recommend            *RecommendInfo                      `protobuf:"bytes,4,opt,name=recommend,proto3" json:"recommend,omitempty"`
	VecTestInfo          []*AlgMultiTestInfo                 `protobuf:"bytes,5,rep,name=vecTestInfo,proto3" json:"vecTestInfo,omitempty"` //多层abtest信息, 在请求access的时候已经确定好
	ReqId                string                              `protobuf:"bytes,6,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Timeout              int32                               `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"` //请求超时时间，单位ms
	AppKey               string                              `protobuf:"bytes,8,opt,name=appKey,proto3" json:"appKey,omitempty"`
	NeedDebug            bool                                `protobuf:"varint,9,opt,name=need_debug,json=needDebug,proto3" json:"need_debug,omitempty"`                                                                                              //是否需要debug，目前只有白名单看板需要
	SceneInsulateContext map[string]*SeviceSceneInsulateInfo `protobuf:"bytes,10,rep,name=sceneInsulateContext,proto3" json:"sceneInsulateContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //服务场景分离信息
}

func (x *RecomRequest) Reset() {
	*x = RecomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomRequest) ProtoMessage() {}

func (x *RecomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomRequest.ProtoReflect.Descriptor instead.
func (*RecomRequest) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{16}
}

func (x *RecomRequest) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RecomRequest) GetLocation() *LocationInfo {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RecomRequest) GetNetwork() *NetworkInfo {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *RecomRequest) GetRecommend() *RecommendInfo {
	if x != nil {
		return x.Recommend
	}
	return nil
}

func (x *RecomRequest) GetVecTestInfo() []*AlgMultiTestInfo {
	if x != nil {
		return x.VecTestInfo
	}
	return nil
}

func (x *RecomRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RecomRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RecomRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *RecomRequest) GetNeedDebug() bool {
	if x != nil {
		return x.NeedDebug
	}
	return false
}

func (x *RecomRequest) GetSceneInsulateContext() map[string]*SeviceSceneInsulateInfo {
	if x != nil {
		return x.SceneInsulateContext
	}
	return nil
}

//推荐结果
type RecomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret        int32                     `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	RetStr     string                    `protobuf:"bytes,2,opt,name=retStr,proto3" json:"retStr,omitempty"`
	RecomInfo  *RecommendInfo            `protobuf:"bytes,3,opt,name=recomInfo,proto3" json:"recomInfo,omitempty"`
	DebugInfo  map[string]string         `protobuf:"bytes,4,rep,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //多层服务的debug内容，每层对应map的一项
	DebugInfo2 map[string]*RecomResponse `protobuf:"bytes,5,rep,name=debug_info2,json=debugInfo2,proto3" json:"debug_info2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecomResponse) Reset() {
	*x = RecomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomResponse) ProtoMessage() {}

func (x *RecomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomResponse.ProtoReflect.Descriptor instead.
func (*RecomResponse) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{17}
}

func (x *RecomResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *RecomResponse) GetRetStr() string {
	if x != nil {
		return x.RetStr
	}
	return ""
}

func (x *RecomResponse) GetRecomInfo() *RecommendInfo {
	if x != nil {
		return x.RecomInfo
	}
	return nil
}

func (x *RecomResponse) GetDebugInfo() map[string]string {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *RecomResponse) GetDebugInfo2() map[string]*RecomResponse {
	if x != nil {
		return x.DebugInfo2
	}
	return nil
}

var File_recommend_proto protoreflect.FileDescriptor

var file_recommend_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x1a, 0x12, 0x72, 0x74, 0x72, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b,
	0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a,
	0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x41, 0x6c, 0x67,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x41, 0x6c, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x41, 0x6c, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f,
	0x72, 0x74, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x53, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5c, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x42, 0x73, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x42, 0x73, 0x73, 0x69, 0x64, 0x22, 0x9a, 0x03,
	0x0a, 0x0a, 0x41, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x54, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x54, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x69, 0x64, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x41, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x69, 0x64, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x1a, 0x3a,
	0x0a, 0x0c, 0x49, 0x64, 0x65, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x89, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x41, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x76, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x5f, 0x72,
	0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f,
	0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x76, 0x65, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x0a, 0x6d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x9b, 0x01, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x53, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x22, 0xb9, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x65, 0x63, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x76, 0x65, 0x63, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x4b, 0x61, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x76,
	0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x49, 0x64, 0x4b, 0x61,
	0x69, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x65, 0x63, 0x55, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x41, 0x70, 0x70, 0x49, 0x64, 0x4b, 0x61, 0x69, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x14, 0x76, 0x65, 0x63, 0x55, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x4b, 0x61, 0x69, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x53, 0x65, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6f, 0x5f, 0x72,
	0x74, 0x72, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x53, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x08, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x76, 0x65,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x41, 0x6c, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6f,
	0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x08, 0x76, 0x65, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x52, 0x0a, 0x0c, 0x4d, 0x61, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f,
	0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x04, 0x0a,
	0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74,
	0x72, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65,
	0x65, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x63, 0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x69, 0x0a, 0x19,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x5f,
	0x72, 0x74, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x47, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x5f, 0x72, 0x74, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6f, 0x5f,
	0x72, 0x74, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xee, 0x26,
	0x0a, 0x0c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x43, 0x50, 0x44, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x45, 0x52, 0x4f, 0x46, 0x45,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x0c, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10, 0x13, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x1c, 0x12, 0x2e, 0x0a, 0x2a,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x32, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x33, 0x12, 0x2b, 0x0a, 0x27, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x34, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x35, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x36, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x37, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x38,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x39, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x4f,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x3a, 0x12, 0x32, 0x0a, 0x2e, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x54, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x50, 0x41, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x3b, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x3c,
	0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x3d, 0x12, 0x2e,
	0x0a, 0x2a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x3e, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x66, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x68, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x43, 0x50, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x69, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x6a, 0x12, 0x2f, 0x0a, 0x2b, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x6b, 0x12, 0x2f, 0x0a, 0x2b,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x6c, 0x12, 0x2d, 0x0a,
	0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x6d, 0x12, 0x2e, 0x0a, 0x2a,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x6e, 0x12, 0x2f, 0x0a, 0x2b,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x42, 0x45, 0x46,
	0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x6f, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x70, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x10, 0x71, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x50,
	0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x72, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x50, 0x44, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x10, 0x73, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x50, 0x44, 0x5f,
	0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x74, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x50, 0x44,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x75, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x10, 0x76, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x10, 0x77, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x59, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x10, 0x78, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x79, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x7a, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4e,
	0x45, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x7b, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x10, 0x7c, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x7d, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x4f, 0x54, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x7e, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x7f, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x4f, 0x54,
	0x52, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x80,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x35, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xc8, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x35, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xc9, 0x01,
	0x12, 0x2c, 0x0a, 0x27, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x35, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xca, 0x01, 0x12, 0x27,
	0x0a, 0x22, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x35, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x35, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0xcc, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x35, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x48, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x53, 0x10, 0xcd, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x35, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x46,
	0x4f, 0x52, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x10, 0xce, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x35, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xcf, 0x01, 0x12,
	0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xad, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x10, 0xae, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59,
	0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xaf, 0x02, 0x12, 0x27,
	0x0a, 0x22, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x46, 0x4d, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xb0, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x46,
	0x4d, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xb1,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x46, 0x4d, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xb2, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x10, 0xb3, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x45, 0x58,
	0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xb4,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x46, 0x4d, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xb5, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0xdf, 0x02, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x10, 0xe0, 0x02, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x46, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x10, 0xe1, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x50, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0xe2, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x50,
	0x44, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0xe3, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x10, 0xe4, 0x02, 0x12,
	0x2b, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x59, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0xe5, 0x02, 0x12, 0x30, 0x0a, 0x2b,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0xe6, 0x02, 0x12, 0x26,
	0x0a, 0x21, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x10, 0xe7, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x10, 0xe8,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xe9, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x10,
	0xea, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45,
	0x54, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x10, 0xeb, 0x02, 0x12, 0x24, 0x0a, 0x1f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x48, 0x4f, 0x54, 0x10,
	0xec, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xed, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0xee, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xef, 0x02, 0x12, 0x28, 0x0a,
	0x23, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0xf0, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0xf1, 0x02, 0x12, 0x2e,
	0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0xf2, 0x02, 0x12, 0x2f,
	0x0a, 0x2a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf3, 0x02, 0x12,
	0x2b, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x10, 0xf4, 0x02, 0x12, 0x34, 0x0a, 0x2f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x10,
	0xf5, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x50, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0xf6, 0x02, 0x12,
	0x2c, 0x0a, 0x27, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf7, 0x02, 0x12, 0x2b, 0x0a,
	0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0xf8, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x42, 0x53, 0x10, 0xf9,
	0x02, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4a, 0x4f, 0x59,
	0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x90,
	0x03, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x9a,
	0x03, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x9b,
	0x03, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x50, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x9c, 0x03, 0x12, 0x37,
	0x0a, 0x32, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42,
	0x4f, 0x58, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x9d, 0x03, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x48, 0x4f, 0x54, 0x5f,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x9e, 0x03, 0x12, 0x32,
	0x0a, 0x2d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x48, 0x49, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10,
	0x9f, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x43,
	0x50, 0x43, 0x10, 0xc2, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x50, 0x44, 0x10, 0xc3, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x4f, 0x43, 0x50, 0x43, 0x10, 0xc4, 0x03, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49,
	0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf5,
	0x03, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf6, 0x03, 0x12, 0x3a, 0x0a, 0x35, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e,
	0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x10, 0xf7, 0x03, 0x12, 0x38, 0x0a, 0x33, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d,
	0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0xf8, 0x03, 0x12, 0x30,
	0x0a, 0x2b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf9, 0x03,
	0x12, 0x2b, 0x0a, 0x26, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xfa, 0x03, 0x12, 0x2f, 0x0a,
	0x2a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0xfb, 0x03, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recommend_proto_rawDescOnce sync.Once
	file_recommend_proto_rawDescData = file_recommend_proto_rawDesc
)

func file_recommend_proto_rawDescGZIP() []byte {
	file_recommend_proto_rawDescOnce.Do(func() {
		file_recommend_proto_rawDescData = protoimpl.X.CompressGZIP(file_recommend_proto_rawDescData)
	})
	return file_recommend_proto_rawDescData
}

var file_recommend_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_recommend_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_recommend_proto_goTypes = []interface{}{
	(SCENE_CMD_ID)(0),               // 0: so_rtrs.SCENE_CMD_ID
	(*AllTestInfo)(nil),             // 1: so_rtrs.AllTestInfo
	(*PredictorInfo)(nil),           // 2: so_rtrs.PredictorInfo
	(*SceneSubAlgInfo)(nil),         // 3: so_rtrs.SceneSubAlgInfo
	(*SeviceSceneInsulateInfo)(nil), // 4: so_rtrs.SeviceSceneInsulateInfo
	(*DeviceInfo)(nil),              // 5: so_rtrs.DeviceInfo
	(*LocationInfo)(nil),            // 6: so_rtrs.LocationInfo
	(*NetworkInfo)(nil),             // 7: so_rtrs.NetworkInfo
	(*AdItemInfo)(nil),              // 8: so_rtrs.AdItemInfo
	(*Module)(nil),                  // 9: so_rtrs.Module
	(*RecommendItem)(nil),           // 10: so_rtrs.RecommendItem
	(*RecommendGroup)(nil),          // 11: so_rtrs.RecommendGroup
	(*Interval)(nil),                // 12: so_rtrs.Interval
	(*AgeSexInfo)(nil),              // 13: so_rtrs.AgeSexInfo
	(*IncomeCityInfo)(nil),          // 14: so_rtrs.IncomeCityInfo
	(*RuleAppDirectInfo)(nil),       // 15: so_rtrs.RuleAppDirectInfo
	(*RecommendInfo)(nil),           // 16: so_rtrs.RecommendInfo
	(*RecomRequest)(nil),            // 17: so_rtrs.RecomRequest
	(*RecomResponse)(nil),           // 18: so_rtrs.RecomResponse
	nil,                             // 19: so_rtrs.AdItemInfo.IdeaMapEntry
	nil,                             // 20: so_rtrs.RecommendItem.MapContextEntry
	nil,                             // 21: so_rtrs.RecommendGroup.MapContextEntry
	nil,                             // 22: so_rtrs.RuleAppDirectInfo.MapTagInfoEntry
	nil,                             // 23: so_rtrs.RecommendInfo.MapItemEntry
	nil,                             // 24: so_rtrs.RecommendInfo.MapContextEntry
	nil,                             // 25: so_rtrs.RecomRequest.SceneInsulateContextEntry
	nil,                             // 26: so_rtrs.RecomResponse.DebugInfoEntry
	nil,                             // 27: so_rtrs.RecomResponse.DebugInfo2Entry
	(*AlgMultiTestInfo)(nil),        // 28: so_rtrs.AlgMultiTestInfo
}
var file_recommend_proto_depIdxs = []int32{
	28, // 0: so_rtrs.AllTestInfo.vecTestInfo:type_name -> so_rtrs.AlgMultiTestInfo
	2,  // 1: so_rtrs.SceneSubAlgInfo.predictors:type_name -> so_rtrs.PredictorInfo
	19, // 2: so_rtrs.AdItemInfo.ideaMap:type_name -> so_rtrs.AdItemInfo.IdeaMapEntry
	8,  // 3: so_rtrs.RecommendItem.adInfo:type_name -> so_rtrs.AdItemInfo
	20, // 4: so_rtrs.RecommendItem.mapContext:type_name -> so_rtrs.RecommendItem.MapContextEntry
	10, // 5: so_rtrs.RecommendGroup.vecItem:type_name -> so_rtrs.RecommendItem
	21, // 6: so_rtrs.RecommendGroup.mapContext:type_name -> so_rtrs.RecommendGroup.MapContextEntry
	12, // 7: so_rtrs.AgeSexInfo.ageInterval:type_name -> so_rtrs.Interval
	12, // 8: so_rtrs.IncomeCityInfo.incomeInterval:type_name -> so_rtrs.Interval
	22, // 9: so_rtrs.RuleAppDirectInfo.mapTagInfo:type_name -> so_rtrs.RuleAppDirectInfo.MapTagInfoEntry
	13, // 10: so_rtrs.RuleAppDirectInfo.ageSexInfo:type_name -> so_rtrs.AgeSexInfo
	14, // 11: so_rtrs.RuleAppDirectInfo.incomeCityInfo:type_name -> so_rtrs.IncomeCityInfo
	0,  // 12: so_rtrs.RecommendInfo.sceneId:type_name -> so_rtrs.SCENE_CMD_ID
	10, // 13: so_rtrs.RecommendInfo.vecItem:type_name -> so_rtrs.RecommendItem
	23, // 14: so_rtrs.RecommendInfo.mapItem:type_name -> so_rtrs.RecommendInfo.MapItemEntry
	24, // 15: so_rtrs.RecommendInfo.mapContext:type_name -> so_rtrs.RecommendInfo.MapContextEntry
	3,  // 16: so_rtrs.RecommendInfo.subAlgInfo:type_name -> so_rtrs.SceneSubAlgInfo
	9,  // 17: so_rtrs.RecommendInfo.module:type_name -> so_rtrs.Module
	11, // 18: so_rtrs.RecommendInfo.vecGroup:type_name -> so_rtrs.RecommendGroup
	5,  // 19: so_rtrs.RecomRequest.device:type_name -> so_rtrs.DeviceInfo
	6,  // 20: so_rtrs.RecomRequest.location:type_name -> so_rtrs.LocationInfo
	7,  // 21: so_rtrs.RecomRequest.network:type_name -> so_rtrs.NetworkInfo
	16, // 22: so_rtrs.RecomRequest.recommend:type_name -> so_rtrs.RecommendInfo
	28, // 23: so_rtrs.RecomRequest.vecTestInfo:type_name -> so_rtrs.AlgMultiTestInfo
	25, // 24: so_rtrs.RecomRequest.sceneInsulateContext:type_name -> so_rtrs.RecomRequest.SceneInsulateContextEntry
	16, // 25: so_rtrs.RecomResponse.recomInfo:type_name -> so_rtrs.RecommendInfo
	26, // 26: so_rtrs.RecomResponse.debug_info:type_name -> so_rtrs.RecomResponse.DebugInfoEntry
	27, // 27: so_rtrs.RecomResponse.debug_info2:type_name -> so_rtrs.RecomResponse.DebugInfo2Entry
	10, // 28: so_rtrs.RecommendInfo.MapItemEntry.value:type_name -> so_rtrs.RecommendItem
	4,  // 29: so_rtrs.RecomRequest.SceneInsulateContextEntry.value:type_name -> so_rtrs.SeviceSceneInsulateInfo
	18, // 30: so_rtrs.RecomResponse.DebugInfo2Entry.value:type_name -> so_rtrs.RecomResponse
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_recommend_proto_init() }
func file_recommend_proto_init() {
	if File_recommend_proto != nil {
		return
	}
	file_rtrs_expinfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recommend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneSubAlgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeviceSceneInsulateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgeSexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomeCityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleAppDirectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recommend_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recommend_proto_goTypes,
		DependencyIndexes: file_recommend_proto_depIdxs,
		EnumInfos:         file_recommend_proto_enumTypes,
		MessageInfos:      file_recommend_proto_msgTypes,
	}.Build()
	File_recommend_proto = out.File
	file_recommend_proto_rawDesc = nil
	file_recommend_proto_goTypes = nil
	file_recommend_proto_depIdxs = nil
}
