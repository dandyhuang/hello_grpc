// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// option optimize_for = LITE_RUNTIME;

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.2
// source: recommend.proto

package rec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AD_TYPE int32

const (
	AD_TYPE_AD_TYPE_COMMON   AD_TYPE = 0
	AD_TYPE_AD_TYPE_GENERNAL AD_TYPE = 1
	AD_TYPE_AD_TYPE_DYNAMIC  AD_TYPE = 2
)

// Enum value maps for AD_TYPE.
var (
	AD_TYPE_name = map[int32]string{
		0: "AD_TYPE_COMMON",
		1: "AD_TYPE_GENERNAL",
		2: "AD_TYPE_DYNAMIC",
	}
	AD_TYPE_value = map[string]int32{
		"AD_TYPE_COMMON":   0,
		"AD_TYPE_GENERNAL": 1,
		"AD_TYPE_DYNAMIC":  2,
	}
)

func (x AD_TYPE) Enum() *AD_TYPE {
	p := new(AD_TYPE)
	*p = x
	return p
}

func (x AD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_recommend_proto_enumTypes[0].Descriptor()
}

func (AD_TYPE) Type() protoreflect.EnumType {
	return &file_recommend_proto_enumTypes[0]
}

func (x AD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AD_TYPE.Descriptor instead.
func (AD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{0}
}

// 代表流量经过该层，所附带的算法参数和系统参数
type AlgMultiTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//暂未使用
	TestID int32 `protobuf:"varint,1,opt,name=testID,proto3" json:"testID,omitempty"`
	//标识实验流量进入哪个so执行，灰度过程中ruleID 和实验参数中都填入
	RuleID int32 `protobuf:"varint,2,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	//实验参数 由实验者和系统设定参数，各自识别并执行
	//算法参数:被相应的so识别并执行
	//系统参数:，IDC路由参数,参数
	//参数名，参数值 比如 ruleID="10"
	MapParams map[string]string `protobuf:"bytes,3,rep,name=mapParams,proto3" json:"mapParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 1 -> scoring
	// 2 -> sorting
	// 3 -> filter
	// R(ascii) -> retrieval
	// ....
	ExpLayer uint32 `protobuf:"varint,4,opt,name=expLayer,proto3" json:"expLayer,omitempty"`
	// 实验名称
	ExpName string `protobuf:"bytes,5,opt,name=expName,proto3" json:"expName,omitempty"`
	Pageid  uint64 `protobuf:"varint,6,opt,name=pageid,proto3" json:"pageid,omitempty"`
}

func (x *AlgMultiTestInfo) Reset() {
	*x = AlgMultiTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgMultiTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgMultiTestInfo) ProtoMessage() {}

func (x *AlgMultiTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgMultiTestInfo.ProtoReflect.Descriptor instead.
func (*AlgMultiTestInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{0}
}

func (x *AlgMultiTestInfo) GetTestID() int32 {
	if x != nil {
		return x.TestID
	}
	return 0
}

func (x *AlgMultiTestInfo) GetRuleID() int32 {
	if x != nil {
		return x.RuleID
	}
	return 0
}

func (x *AlgMultiTestInfo) GetMapParams() map[string]string {
	if x != nil {
		return x.MapParams
	}
	return nil
}

func (x *AlgMultiTestInfo) GetExpLayer() uint32 {
	if x != nil {
		return x.ExpLayer
	}
	return 0
}

func (x *AlgMultiTestInfo) GetExpName() string {
	if x != nil {
		return x.ExpName
	}
	return ""
}

func (x *AlgMultiTestInfo) GetPageid() uint64 {
	if x != nil {
		return x.Pageid
	}
	return 0
}

type AllTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VecTestInfo []*AlgMultiTestInfo `protobuf:"bytes,1,rep,name=vecTestInfo,proto3" json:"vecTestInfo,omitempty"`
	DebugError  string              `protobuf:"bytes,2,opt,name=debug_error,json=debugError,proto3" json:"debug_error,omitempty"`
}

func (x *AllTestInfo) Reset() {
	*x = AllTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTestInfo) ProtoMessage() {}

func (x *AllTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTestInfo.ProtoReflect.Descriptor instead.
func (*AllTestInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{1}
}

func (x *AllTestInfo) GetVecTestInfo() []*AlgMultiTestInfo {
	if x != nil {
		return x.VecTestInfo
	}
	return nil
}

func (x *AllTestInfo) GetDebugError() string {
	if x != nil {
		return x.DebugError
	}
	return ""
}

//Begin---------用户相关
//设备相关信息
//目的：用于个性化推荐
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndroidId     string  `protobuf:"bytes,1,opt,name=androidId,proto3" json:"androidId,omitempty"`
	Imei          string  `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	SuperUser     int64   `protobuf:"varint,3,opt,name=superUser,proto3" json:"superUser,omitempty"`             //jail break/root
	Language      string  `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`                //语言
	Manufacturer  string  `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`        //手机厂商 htc, LG, ...
	ModelName     string  `protobuf:"bytes,6,opt,name=modelName,proto3" json:"modelName,omitempty"`              //手机型号 Nexus 5, ...
	OsVersion     string  `protobuf:"bytes,7,opt,name=osVersion,proto3" json:"osVersion,omitempty"`              //安卓版本号 4.4.1
	Resolution    string  `protobuf:"bytes,8,opt,name=resolution,proto3" json:"resolution,omitempty"`            //400x800, 400*600
	MacAddr       string  `protobuf:"bytes,9,opt,name=macAddr,proto3" json:"macAddr,omitempty"`                  //34:34:f3:...
	ClientVersion string  `protobuf:"bytes,10,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`     //客户端版本号 TMA_411_DEV/040411&NA/040411&2.3.4_10_1&20_15_14&samsung_GTS5570&NA&NA&V3
	AddAttribute  int64   `protobuf:"varint,11,opt,name=addAttribute,proto3" json:"addAttribute,omitempty"`      //设备附加属性
	PreferInfos   []int32 `protobuf:"varint,12,rep,packed,name=preferInfos,proto3" json:"preferInfos,omitempty"` //偏好列表
	Udid          string  `protobuf:"bytes,13,opt,name=udid,proto3" json:"udid,omitempty"`                       //用户设备统一唯一标识符
	Oaid          string  `protobuf:"bytes,14,opt,name=oaid,proto3" json:"oaid,omitempty"`
	Vaid          string  `protobuf:"bytes,15,opt,name=vaid,proto3" json:"vaid,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceInfo) GetAndroidId() string {
	if x != nil {
		return x.AndroidId
	}
	return ""
}

func (x *DeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfo) GetSuperUser() int64 {
	if x != nil {
		return x.SuperUser
	}
	return 0
}

func (x *DeviceInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *DeviceInfo) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *DeviceInfo) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *DeviceInfo) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *DeviceInfo) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceInfo) GetAddAttribute() int64 {
	if x != nil {
		return x.AddAttribute
	}
	return 0
}

func (x *DeviceInfo) GetPreferInfos() []int32 {
	if x != nil {
		return x.PreferInfos
	}
	return nil
}

func (x *DeviceInfo) GetUdid() string {
	if x != nil {
		return x.Udid
	}
	return ""
}

func (x *DeviceInfo) GetOaid() string {
	if x != nil {
		return x.Oaid
	}
	return ""
}

func (x *DeviceInfo) GetVaid() string {
	if x != nil {
		return x.Vaid
	}
	return ""
}

//位置相关信息
//目的：LBS相关推荐
type LocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City      string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`           //城市
	Longitude string `protobuf:"bytes,2,opt,name=longitude,proto3" json:"longitude,omitempty"` //经纬度
	Timezone  string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`   //时区
}

func (x *LocationInfo) Reset() {
	*x = LocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationInfo) ProtoMessage() {}

func (x *LocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationInfo.ProtoReflect.Descriptor instead.
func (*LocationInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{3}
}

func (x *LocationInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *LocationInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *LocationInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

//网络相关信息
//目的：网络相关过滤
type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi            string `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`                       //sim卡号
	NetworkType     string `protobuf:"bytes,2,opt,name=networkType,proto3" json:"networkType,omitempty"`         //wifi, 2g, 3g...
	NetworkOperator string `protobuf:"bytes,3,opt,name=networkOperator,proto3" json:"networkOperator,omitempty"` //运营商
	PhoneNumber     string `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`         //手机号
	ClientIp        string `protobuf:"bytes,5,opt,name=clientIp,proto3" json:"clientIp,omitempty"`               //客户端用户的ip
	WifiSsid        string `protobuf:"bytes,6,opt,name=wifiSsid,proto3" json:"wifiSsid,omitempty"`               //wifi名(Vivo-Freewifi)
	WifiBssid       string `protobuf:"bytes,7,opt,name=wifiBssid,proto3" json:"wifiBssid,omitempty"`             //wifi路由器的mac地址
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkInfo) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *NetworkInfo) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *NetworkInfo) GetNetworkOperator() string {
	if x != nil {
		return x.NetworkOperator
	}
	return ""
}

func (x *NetworkInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *NetworkInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *NetworkInfo) GetWifiSsid() string {
	if x != nil {
		return x.WifiSsid
	}
	return ""
}

func (x *NetworkInfo) GetWifiBssid() string {
	if x != nil {
		return x.WifiBssid
	}
	return ""
}

type ResponseRecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []int64   `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`                          //creativeid
	ChildId []int64   `protobuf:"varint,2,rep,packed,name=child_id,json=childId,proto3" json:"child_id,omitempty"` //派生广告id,动态创意id
	Score   []float32 `protobuf:"fixed32,3,rep,packed,name=score,proto3" json:"score,omitempty"`
	Cvr     []float32 `protobuf:"fixed32,4,rep,packed,name=cvr,proto3" json:"cvr,omitempty"`
	Rvr     []float32 `protobuf:"fixed32,5,rep,packed,name=rvr,proto3" json:"rvr,omitempty"`
	Cvr2    []float32 `protobuf:"fixed32,6,rep,packed,name=cvr2,proto3" json:"cvr2,omitempty"`
}

func (x *ResponseRecommendItem) Reset() {
	*x = ResponseRecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRecommendItem) ProtoMessage() {}

func (x *ResponseRecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRecommendItem.ProtoReflect.Descriptor instead.
func (*ResponseRecommendItem) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseRecommendItem) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResponseRecommendItem) GetChildId() []int64 {
	if x != nil {
		return x.ChildId
	}
	return nil
}

func (x *ResponseRecommendItem) GetScore() []float32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ResponseRecommendItem) GetCvr() []float32 {
	if x != nil {
		return x.Cvr
	}
	return nil
}

func (x *ResponseRecommendItem) GetRvr() []float32 {
	if x != nil {
		return x.Rvr
	}
	return nil
}

func (x *ResponseRecommendItem) GetCvr2() []float32 {
	if x != nil {
		return x.Cvr2
	}
	return nil
}

type RequestRecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             []int64   `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`                          //creativeid
	ChildId        []int64   `protobuf:"varint,2,rep,packed,name=child_id,json=childId,proto3" json:"child_id,omitempty"` //派生广告id,动态创意id
	Appid          []int64   `protobuf:"varint,3,rep,packed,name=appid,proto3" json:"appid,omitempty"`
	Stage          []int32   `protobuf:"varint,4,rep,packed,name=stage,proto3" json:"stage,omitempty"`                    //ocpc阶段, 非ocpc广告=0, ocpc第一阶段=1, ocpc第二阶段=2, ocpc第三阶段=3
	CostType       []int32   `protobuf:"varint,5,rep,packed,name=costType,proto3" json:"costType,omitempty"`              // 区分广告的计费类型，如是否cpt
	SecondCostType []int32   `protobuf:"varint,6,rep,packed,name=secondCostType,proto3" json:"secondCostType,omitempty"`  //ocpc阶段, 第二目标转化目标
	ScoreTypes     []int32   `protobuf:"varint,7,rep,packed,name=scoreTypes,proto3" json:"scoreTypes,omitempty"`          // 1-ctr; 2-cvr; 4-rvr; 8-cvr2;
	AdType         []AD_TYPE `protobuf:"varint,8,rep,packed,name=adType,proto3,enum=rec.AD_TYPE" json:"adType,omitempty"` // enum AdType {普通广告、通投广告、动态创意};
	Bid            []float32 `protobuf:"fixed32,9,rep,packed,name=bid,proto3" json:"bid,omitempty"`                       // cpc广告主出价， ocpc风控出价
	TitleType      []int32   `protobuf:"varint,10,rep,packed,name=titleType,proto3" json:"titleType,omitempty"`           //dpa广告标题类型：0-模板标题；1商品标题；2-动态标题
}

func (x *RequestRecommendItem) Reset() {
	*x = RequestRecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRecommendItem) ProtoMessage() {}

func (x *RequestRecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRecommendItem.ProtoReflect.Descriptor instead.
func (*RequestRecommendItem) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{6}
}

func (x *RequestRecommendItem) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestRecommendItem) GetChildId() []int64 {
	if x != nil {
		return x.ChildId
	}
	return nil
}

func (x *RequestRecommendItem) GetAppid() []int64 {
	if x != nil {
		return x.Appid
	}
	return nil
}

func (x *RequestRecommendItem) GetStage() []int32 {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *RequestRecommendItem) GetCostType() []int32 {
	if x != nil {
		return x.CostType
	}
	return nil
}

func (x *RequestRecommendItem) GetSecondCostType() []int32 {
	if x != nil {
		return x.SecondCostType
	}
	return nil
}

func (x *RequestRecommendItem) GetScoreTypes() []int32 {
	if x != nil {
		return x.ScoreTypes
	}
	return nil
}

func (x *RequestRecommendItem) GetAdType() []AD_TYPE {
	if x != nil {
		return x.AdType
	}
	return nil
}

func (x *RequestRecommendItem) GetBid() []float32 {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *RequestRecommendItem) GetTitleType() []int32 {
	if x != nil {
		return x.TitleType
	}
	return nil
}

//推荐信息
type RecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId              int64                            `protobuf:"varint,1,opt,name=positionId,proto3" json:"positionId,omitempty"` // 广告位ID(int64)
	RefreshTimes            int32                            `protobuf:"varint,2,opt,name=refreshTimes,proto3" json:"refreshTimes,omitempty"`
	SspMediaType            int32                            `protobuf:"varint,3,opt,name=ssp_media_type,json=sspMediaType,proto3" json:"ssp_media_type,omitempty"`                                                                      // add by luojianhui 20200715, 1表示自有流量，2表示联盟开发者平台的媒体流量，3表示联盟ssp流量
	ReqItems                *RequestRecommendItem            `protobuf:"bytes,4,opt,name=reqItems,proto3" json:"reqItems,omitempty"`                                                                                                     // 请求广告集合
	ResItems                *ResponseRecommendItem           `protobuf:"bytes,5,opt,name=resItems,proto3" json:"resItems,omitempty"`                                                                                                     // 返回广告集合
	MapContext              map[string]string                `protobuf:"bytes,6,rep,name=mapContext,proto3" json:"mapContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`         // 推荐上下文信息
	AreaDldType             int32                            `protobuf:"varint,7,opt,name=areaDldType,proto3" json:"areaDldType,omitempty"`                                                                                              // 1表示 自动下载；2表示手动下载
	ExpName                 string                           `protobuf:"bytes,8,opt,name=expName,proto3" json:"expName,omitempty"`                                                                                                       // 实验信息
	MultiPositionId         []int64                          `protobuf:"varint,9,rep,packed,name=multiPositionId,proto3" json:"multiPositionId,omitempty"`                                                                               // 位次信息
	MultiResItems           map[int64]*ResponseRecommendItem `protobuf:"bytes,10,rep,name=multiResItems,proto3" json:"multiResItems,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //多位次信息返回结果
	MultiPositionIdBidFloor []int64                          `protobuf:"varint,11,rep,packed,name=multiPositionIdBidFloor,proto3" json:"multiPositionIdBidFloor,omitempty"`                                                              // add by shaodi(20210419), 上游传过来的底价，跟广告位相关。 后续跟广告位相关的抽象出一个message
}

func (x *RecommendInfo) Reset() {
	*x = RecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendInfo) ProtoMessage() {}

func (x *RecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendInfo.ProtoReflect.Descriptor instead.
func (*RecommendInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{7}
}

func (x *RecommendInfo) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *RecommendInfo) GetRefreshTimes() int32 {
	if x != nil {
		return x.RefreshTimes
	}
	return 0
}

func (x *RecommendInfo) GetSspMediaType() int32 {
	if x != nil {
		return x.SspMediaType
	}
	return 0
}

func (x *RecommendInfo) GetReqItems() *RequestRecommendItem {
	if x != nil {
		return x.ReqItems
	}
	return nil
}

func (x *RecommendInfo) GetResItems() *ResponseRecommendItem {
	if x != nil {
		return x.ResItems
	}
	return nil
}

func (x *RecommendInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

func (x *RecommendInfo) GetAreaDldType() int32 {
	if x != nil {
		return x.AreaDldType
	}
	return 0
}

func (x *RecommendInfo) GetExpName() string {
	if x != nil {
		return x.ExpName
	}
	return ""
}

func (x *RecommendInfo) GetMultiPositionId() []int64 {
	if x != nil {
		return x.MultiPositionId
	}
	return nil
}

func (x *RecommendInfo) GetMultiResItems() map[int64]*ResponseRecommendItem {
	if x != nil {
		return x.MultiResItems
	}
	return nil
}

func (x *RecommendInfo) GetMultiPositionIdBidFloor() []int64 {
	if x != nil {
		return x.MultiPositionIdBidFloor
	}
	return nil
}

//Rank相关
type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId     string `protobuf:"bytes,1,opt,name=moduleId,proto3" json:"moduleId,omitempty"`
	ModuleType   int32  `protobuf:"varint,2,opt,name=moduleType,proto3" json:"moduleType,omitempty"`    //0:相关推荐 1：同标签推荐 2：同专题推荐
	StrategyId   string `protobuf:"bytes,3,opt,name=strategyId,proto3" json:"strategyId,omitempty"`     //游戏调参策略ID
	RerankAlg    string `protobuf:"bytes,4,opt,name=rerankAlg,proto3" json:"rerankAlg,omitempty"`       //游戏调参算法
	StrategyType string `protobuf:"bytes,5,opt,name=strategyType,proto3" json:"strategyType,omitempty"` //游戏调参类型
	TuningMethod string `protobuf:"bytes,6,opt,name=tuningMethod,proto3" json:"tuningMethod,omitempty"` //游戏调参方式
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{8}
}

func (x *Module) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *Module) GetModuleType() int32 {
	if x != nil {
		return x.ModuleType
	}
	return 0
}

func (x *Module) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *Module) GetRerankAlg() string {
	if x != nil {
		return x.RerankAlg
	}
	return ""
}

func (x *Module) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *Module) GetTuningMethod() string {
	if x != nil {
		return x.TuningMethod
	}
	return ""
}

//请求Item信息
type RankItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        int64             `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	CreativeId   int64             `protobuf:"varint,2,opt,name=creativeId,proto3" json:"creativeId,omitempty"`                                                                                                           //创意id，与appid的关系是多对
	AdTxt        string            `protobuf:"bytes,3,opt,name=adTxt,proto3" json:"adTxt,omitempty"`                                                                                                                      // 广告语
	StartTime    int32             `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`                                                                                                             // 广告开始时间
	EndTime      int32             `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                                                                                                                 //广告结束时间
	CostType     int32             `protobuf:"varint,6,opt,name=costType,proto3" json:"costType,omitempty"`                                                                                                               // 计费类型: 1、表示cpc；2、表示 ocpc; 3、表示cpd；4、表示 ocpd;
	Price        float64           `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`                                                                                                                    // 广告的价格
	ChargeMode   int32             `protobuf:"varint,8,opt,name=chargeMode,proto3" json:"chargeMode,omitempty"`                                                                                                           // 计费模式：1、cpd；2、ocpd；4、动态出价
	SecondCvType int32             `protobuf:"varint,9,opt,name=secondCvType,proto3" json:"secondCvType,omitempty"`                                                                                                       //ocpc阶段, 第二目标转化目标
	Bid          float64           `protobuf:"fixed64,10,opt,name=bid,proto3" json:"bid,omitempty"`                                                                                                                       //广告主出价
	MapContext   map[string]string `protobuf:"bytes,99,rep,name=map_context,json=mapContext,proto3" json:"map_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段，性能不高，字段序号必须小于99
	//推荐响应字段
	RecallScore         float64 `protobuf:"fixed64,100,opt,name=recallScore,proto3" json:"recallScore,omitempty"`                 //召回打分(公共)
	StrategyRecallScore float64 `protobuf:"fixed64,101,opt,name=strategyRecallScore,proto3" json:"strategyRecallScore,omitempty"` //策略召回打分(搜索公共)
	FilterScore         float64 `protobuf:"fixed64,102,opt,name=filterScore,proto3" json:"filterScore,omitempty"`                 //粗排打分(搜索)
	FilterCtrScore      float64 `protobuf:"fixed64,103,opt,name=filterCtrScore,proto3" json:"filterCtrScore,omitempty"`           //粗排Ctr打分(CPD)
	FilterCvrScore      float64 `protobuf:"fixed64,104,opt,name=filterCvrScore,proto3" json:"filterCvrScore,omitempty"`           //粗排Cvr打分(CPD)
	CtrScore            float64 `protobuf:"fixed64,105,opt,name=ctrScore,proto3" json:"ctrScore,omitempty"`                       //ctr打分(公共)
	CvrScore            float64 `protobuf:"fixed64,106,opt,name=cvrScore,proto3" json:"cvrScore,omitempty"`                       //cvr打分(公共)
	Cvr2Score           float64 `protobuf:"fixed64,107,opt,name=cvr2Score,proto3" json:"cvr2Score,omitempty"`                     //cvr2打分(搜索)
	LtvScore            float64 `protobuf:"fixed64,108,opt,name=ltvScore,proto3" json:"ltvScore,omitempty"`                       //ltv打分(游戏)
	Ltv2Score           float64 `protobuf:"fixed64,109,opt,name=ltv2Score,proto3" json:"ltv2Score,omitempty"`                     //ltv2(游戏)
	Ltv3Score           float64 `protobuf:"fixed64,110,opt,name=ltv3Score,proto3" json:"ltv3Score,omitempty"`                     //ltv3(游戏)
	PayWillScore        float64 `protobuf:"fixed64,111,opt,name=payWillScore,proto3" json:"payWillScore,omitempty"`               //pay_wil打分(游戏)
	PayWill2Score       float64 `protobuf:"fixed64,112,opt,name=payWill2Score,proto3" json:"payWill2Score,omitempty"`             //pay_will2 打分(游戏)
	RetentionScore      float64 `protobuf:"fixed64,113,opt,name=retentionScore,proto3" json:"retentionScore,omitempty"`           //retention 打分(游戏)
	RecallType          int32   `protobuf:"varint,114,opt,name=recallType,proto3" json:"recallType,omitempty"`                    //召回类型
	TagA                string  `protobuf:"bytes,130,opt,name=tagA,proto3" json:"tagA,omitempty"`
	TagB                string  `protobuf:"bytes,131,opt,name=tagB,proto3" json:"tagB,omitempty"`
	StrategyId          string  `protobuf:"bytes,132,opt,name=strategyId,proto3" json:"strategyId,omitempty"` //游戏调参策略ID
	RerankAlg           string  `protobuf:"bytes,133,opt,name=rerankAlg,proto3" json:"rerankAlg,omitempty"`   //游戏调参算法
}

func (x *RankItemInfo) Reset() {
	*x = RankItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankItemInfo) ProtoMessage() {}

func (x *RankItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankItemInfo.ProtoReflect.Descriptor instead.
func (*RankItemInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{9}
}

func (x *RankItemInfo) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RankItemInfo) GetCreativeId() int64 {
	if x != nil {
		return x.CreativeId
	}
	return 0
}

func (x *RankItemInfo) GetAdTxt() string {
	if x != nil {
		return x.AdTxt
	}
	return ""
}

func (x *RankItemInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RankItemInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RankItemInfo) GetCostType() int32 {
	if x != nil {
		return x.CostType
	}
	return 0
}

func (x *RankItemInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RankItemInfo) GetChargeMode() int32 {
	if x != nil {
		return x.ChargeMode
	}
	return 0
}

func (x *RankItemInfo) GetSecondCvType() int32 {
	if x != nil {
		return x.SecondCvType
	}
	return 0
}

func (x *RankItemInfo) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *RankItemInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

func (x *RankItemInfo) GetRecallScore() float64 {
	if x != nil {
		return x.RecallScore
	}
	return 0
}

func (x *RankItemInfo) GetStrategyRecallScore() float64 {
	if x != nil {
		return x.StrategyRecallScore
	}
	return 0
}

func (x *RankItemInfo) GetFilterScore() float64 {
	if x != nil {
		return x.FilterScore
	}
	return 0
}

func (x *RankItemInfo) GetFilterCtrScore() float64 {
	if x != nil {
		return x.FilterCtrScore
	}
	return 0
}

func (x *RankItemInfo) GetFilterCvrScore() float64 {
	if x != nil {
		return x.FilterCvrScore
	}
	return 0
}

func (x *RankItemInfo) GetCtrScore() float64 {
	if x != nil {
		return x.CtrScore
	}
	return 0
}

func (x *RankItemInfo) GetCvrScore() float64 {
	if x != nil {
		return x.CvrScore
	}
	return 0
}

func (x *RankItemInfo) GetCvr2Score() float64 {
	if x != nil {
		return x.Cvr2Score
	}
	return 0
}

func (x *RankItemInfo) GetLtvScore() float64 {
	if x != nil {
		return x.LtvScore
	}
	return 0
}

func (x *RankItemInfo) GetLtv2Score() float64 {
	if x != nil {
		return x.Ltv2Score
	}
	return 0
}

func (x *RankItemInfo) GetLtv3Score() float64 {
	if x != nil {
		return x.Ltv3Score
	}
	return 0
}

func (x *RankItemInfo) GetPayWillScore() float64 {
	if x != nil {
		return x.PayWillScore
	}
	return 0
}

func (x *RankItemInfo) GetPayWill2Score() float64 {
	if x != nil {
		return x.PayWill2Score
	}
	return 0
}

func (x *RankItemInfo) GetRetentionScore() float64 {
	if x != nil {
		return x.RetentionScore
	}
	return 0
}

func (x *RankItemInfo) GetRecallType() int32 {
	if x != nil {
		return x.RecallType
	}
	return 0
}

func (x *RankItemInfo) GetTagA() string {
	if x != nil {
		return x.TagA
	}
	return ""
}

func (x *RankItemInfo) GetTagB() string {
	if x != nil {
		return x.TagB
	}
	return ""
}

func (x *RankItemInfo) GetStrategyId() string {
	if x != nil {
		return x.StrategyId
	}
	return ""
}

func (x *RankItemInfo) GetRerankAlg() string {
	if x != nil {
		return x.RerankAlg
	}
	return ""
}

type RankRecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId         int32             `protobuf:"varint,1,opt,name=sceneId,proto3" json:"sceneId,omitempty"`                                                                                                                 //场景定义 9999以下就场景，10000~19999:搜索，20000~29999：CPD:30000~39999，游戏：40000~49999，内外销：50000~59999
	SceneSubAlg     string            `protobuf:"bytes,2,opt,name=sceneSubAlg,proto3" json:"sceneSubAlg,omitempty"`                                                                                                          //目前流量还是通过二部来划分，用来标识一个场景下的子流量
	Context         string            `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`                                                                                                                  //上下文信息，比如搜索的精准搜索匹配结果
	PlatformVersion int32             `protobuf:"varint,4,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`                                                                                                 //平台版本号：比如应用商店、浏览器、游戏中心
	Query           string            `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`                                                                                                                      //query
	AdxAppList      string            `protobuf:"bytes,6,opt,name=adxAppList,proto3" json:"adxAppList,omitempty"`                                                                                                            //混排列表
	VecItems        []*RankItemInfo   `protobuf:"bytes,7,rep,name=vecItems,proto3" json:"vecItems,omitempty"`                                                                                                                //item列表信息
	Module          *Module           `protobuf:"bytes,8,opt,name=module,proto3" json:"module,omitempty"`                                                                                                                    //模块信息
	MapContext      map[string]string `protobuf:"bytes,99,rep,name=map_context,json=mapContext,proto3" json:"map_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RankRecommendInfo) Reset() {
	*x = RankRecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendInfo) ProtoMessage() {}

func (x *RankRecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendInfo.ProtoReflect.Descriptor instead.
func (*RankRecommendInfo) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{10}
}

func (x *RankRecommendInfo) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *RankRecommendInfo) GetSceneSubAlg() string {
	if x != nil {
		return x.SceneSubAlg
	}
	return ""
}

func (x *RankRecommendInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RankRecommendInfo) GetPlatformVersion() int32 {
	if x != nil {
		return x.PlatformVersion
	}
	return 0
}

func (x *RankRecommendInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RankRecommendInfo) GetAdxAppList() string {
	if x != nil {
		return x.AdxAppList
	}
	return ""
}

func (x *RankRecommendInfo) GetVecItems() []*RankItemInfo {
	if x != nil {
		return x.VecItems
	}
	return nil
}

func (x *RankRecommendInfo) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *RankRecommendInfo) GetMapContext() map[string]string {
	if x != nil {
		return x.MapContext
	}
	return nil
}

//请求参数
type RankRecommendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string               `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Device      *DeviceInfo          `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                                                                                            //用户设备信息
	Location    *LocationInfo        `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`                                                                                        //用户LBS
	Network     *NetworkInfo         `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`                                                                                          //用户网络信息
	Recommend   []*RankRecommendInfo `protobuf:"bytes,5,rep,name=recommend,proto3" json:"recommend,omitempty"`                                                                                      //请求详情
	VecTestInfo []*AlgMultiTestInfo  `protobuf:"bytes,6,rep,name=vecTestInfo,proto3" json:"vecTestInfo,omitempty"`                                                                                  //abt参数信息
	NeedDebug   bool                 `protobuf:"varint,7,opt,name=needDebug,proto3" json:"needDebug,omitempty"`                                                                                     //是否需要debug，目前只有白名单看板需要
	UserFeature []byte               `protobuf:"bytes,8,opt,name=userFeature,proto3" json:"userFeature,omitempty"`                                                                                  //用户特征
	Context     map[string]string    `protobuf:"bytes,99,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展字段
}

func (x *RankRecommendRequest) Reset() {
	*x = RankRecommendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendRequest) ProtoMessage() {}

func (x *RankRecommendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendRequest.ProtoReflect.Descriptor instead.
func (*RankRecommendRequest) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{11}
}

func (x *RankRecommendRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RankRecommendRequest) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RankRecommendRequest) GetLocation() *LocationInfo {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RankRecommendRequest) GetNetwork() *NetworkInfo {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *RankRecommendRequest) GetRecommend() []*RankRecommendInfo {
	if x != nil {
		return x.Recommend
	}
	return nil
}

func (x *RankRecommendRequest) GetVecTestInfo() []*AlgMultiTestInfo {
	if x != nil {
		return x.VecTestInfo
	}
	return nil
}

func (x *RankRecommendRequest) GetNeedDebug() bool {
	if x != nil {
		return x.NeedDebug
	}
	return false
}

func (x *RankRecommendRequest) GetUserFeature() []byte {
	if x != nil {
		return x.UserFeature
	}
	return nil
}

func (x *RankRecommendRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type RankRecommendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                           //0：成功，其他：失败
	ReqId     string               `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`                          //req_id 与RankRecommendRequest 对齐
	Recommend []*RankRecommendInfo `protobuf:"bytes,3,rep,name=recommend,proto3" json:"recommend,omitempty"`                  //响应
	Version   string               `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                      //版本信息
	DebugInfo string               `protobuf:"bytes,5,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"` //debug信息
}

func (x *RankRecommendResponse) Reset() {
	*x = RankRecommendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recommend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankRecommendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankRecommendResponse) ProtoMessage() {}

func (x *RankRecommendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recommend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankRecommendResponse.ProtoReflect.Descriptor instead.
func (*RankRecommendResponse) Descriptor() ([]byte, []int) {
	return file_recommend_proto_rawDescGZIP(), []int{12}
}

func (x *RankRecommendResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RankRecommendResponse) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RankRecommendResponse) GetRecommend() []*RankRecommendInfo {
	if x != nil {
		return x.Recommend
	}
	return nil
}

func (x *RankRecommendResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RankRecommendResponse) GetDebugInfo() string {
	if x != nil {
		return x.DebugInfo
	}
	return ""
}

var File_recommend_proto protoreflect.FileDescriptor

var file_recommend_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x72, 0x65, 0x63, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x41, 0x6c, 0x67, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x09, 0x6d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x41, 0x6c, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x69, 0x64, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0b, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x65,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x41, 0x6c, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xba, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x64, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x61, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x61, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x69,
	0x64, 0x22, 0x5c, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x66,
	0x69, 0x42, 0x73, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69,
	0x66, 0x69, 0x42, 0x73, 0x73, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x03, 0x63, 0x76, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x76, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x03, 0x72, 0x76, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x72, 0x32, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x63, 0x76, 0x72, 0x32, 0x22, 0xa7, 0x02, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x73,
	0x70, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x73, 0x70, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x42, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x44, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x44, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5c, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01,
	0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x6c,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41,
	0x6c, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8d, 0x08, 0x0a, 0x0c, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x54, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x64, 0x54, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x76, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x65, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x74, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x74, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x76, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x76, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x74, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x76, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x76, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x76, 0x72,
	0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x76,
	0x72, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x74, 0x76, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x74, 0x76, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x74, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x74, 0x76, 0x32, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x74, 0x76, 0x33, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x74, 0x76, 0x33, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x32, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x57,
	0x69, 0x6c, 0x6c, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x41, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x41, 0x12, 0x13, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x42, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x42, 0x12, 0x1f, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x6c, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x11, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x78, 0x41, 0x70, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x78, 0x41,
	0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x76, 0x65, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x65, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdd, 0x03, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x76,
	0x65, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x41, 0x6c, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x48, 0x0a, 0x07, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x42,
	0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x76, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x42, 0x0a, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x72, 0x65, 0x63,
	0xa2, 0x02, 0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recommend_proto_rawDescOnce sync.Once
	file_recommend_proto_rawDescData = file_recommend_proto_rawDesc
)

func file_recommend_proto_rawDescGZIP() []byte {
	file_recommend_proto_rawDescOnce.Do(func() {
		file_recommend_proto_rawDescData = protoimpl.X.CompressGZIP(file_recommend_proto_rawDescData)
	})
	return file_recommend_proto_rawDescData
}

var file_recommend_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_recommend_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_recommend_proto_goTypes = []interface{}{
	(AD_TYPE)(0),                  // 0: rec.AD_TYPE
	(*AlgMultiTestInfo)(nil),      // 1: rec.AlgMultiTestInfo
	(*AllTestInfo)(nil),           // 2: rec.AllTestInfo
	(*DeviceInfo)(nil),            // 3: rec.DeviceInfo
	(*LocationInfo)(nil),          // 4: rec.LocationInfo
	(*NetworkInfo)(nil),           // 5: rec.NetworkInfo
	(*ResponseRecommendItem)(nil), // 6: rec.ResponseRecommendItem
	(*RequestRecommendItem)(nil),  // 7: rec.RequestRecommendItem
	(*RecommendInfo)(nil),         // 8: rec.RecommendInfo
	(*Module)(nil),                // 9: rec.Module
	(*RankItemInfo)(nil),          // 10: rec.RankItemInfo
	(*RankRecommendInfo)(nil),     // 11: rec.RankRecommendInfo
	(*RankRecommendRequest)(nil),  // 12: rec.RankRecommendRequest
	(*RankRecommendResponse)(nil), // 13: rec.RankRecommendResponse
	nil,                           // 14: rec.AlgMultiTestInfo.MapParamsEntry
	nil,                           // 15: rec.RecommendInfo.MapContextEntry
	nil,                           // 16: rec.RecommendInfo.MultiResItemsEntry
	nil,                           // 17: rec.RankItemInfo.MapContextEntry
	nil,                           // 18: rec.RankRecommendInfo.MapContextEntry
	nil,                           // 19: rec.RankRecommendRequest.ContextEntry
}
var file_recommend_proto_depIdxs = []int32{
	14, // 0: rec.AlgMultiTestInfo.mapParams:type_name -> rec.AlgMultiTestInfo.MapParamsEntry
	1,  // 1: rec.AllTestInfo.vecTestInfo:type_name -> rec.AlgMultiTestInfo
	0,  // 2: rec.RequestRecommendItem.adType:type_name -> rec.AD_TYPE
	7,  // 3: rec.RecommendInfo.reqItems:type_name -> rec.RequestRecommendItem
	6,  // 4: rec.RecommendInfo.resItems:type_name -> rec.ResponseRecommendItem
	15, // 5: rec.RecommendInfo.mapContext:type_name -> rec.RecommendInfo.MapContextEntry
	16, // 6: rec.RecommendInfo.multiResItems:type_name -> rec.RecommendInfo.MultiResItemsEntry
	17, // 7: rec.RankItemInfo.map_context:type_name -> rec.RankItemInfo.MapContextEntry
	10, // 8: rec.RankRecommendInfo.vecItems:type_name -> rec.RankItemInfo
	9,  // 9: rec.RankRecommendInfo.module:type_name -> rec.Module
	18, // 10: rec.RankRecommendInfo.map_context:type_name -> rec.RankRecommendInfo.MapContextEntry
	3,  // 11: rec.RankRecommendRequest.device:type_name -> rec.DeviceInfo
	4,  // 12: rec.RankRecommendRequest.location:type_name -> rec.LocationInfo
	5,  // 13: rec.RankRecommendRequest.network:type_name -> rec.NetworkInfo
	11, // 14: rec.RankRecommendRequest.recommend:type_name -> rec.RankRecommendInfo
	1,  // 15: rec.RankRecommendRequest.vecTestInfo:type_name -> rec.AlgMultiTestInfo
	19, // 16: rec.RankRecommendRequest.context:type_name -> rec.RankRecommendRequest.ContextEntry
	11, // 17: rec.RankRecommendResponse.recommend:type_name -> rec.RankRecommendInfo
	6,  // 18: rec.RecommendInfo.MultiResItemsEntry.value:type_name -> rec.ResponseRecommendItem
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_recommend_proto_init() }
func file_recommend_proto_init() {
	if File_recommend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recommend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgMultiTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recommend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankRecommendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recommend_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recommend_proto_goTypes,
		DependencyIndexes: file_recommend_proto_depIdxs,
		EnumInfos:         file_recommend_proto_enumTypes,
		MessageInfos:      file_recommend_proto_msgTypes,
	}.Build()
	File_recommend_proto = out.File
	file_recommend_proto_rawDesc = nil
	file_recommend_proto_goTypes = nil
	file_recommend_proto_depIdxs = nil
}
