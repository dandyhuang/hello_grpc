// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feed_proto/feed_api.proto

package feed_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 代表流量经过该层，所附带的算法参数和系统参数
type AlgMultiTestInfo struct {
	//暂未使用
	TestId int32 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	//标识实验流量进入哪个so执行，灰度过程中rule_id 和实验参数中都填入
	RuleId int32 `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	//实验参数 由实验者和系统设定参数，各自识别并执行
	//算法参数:被相应的so识别并执行
	//系统参数:，IDC路由参数,参数
	//参数名，参数值 比如 rule_id="10"
	MapParams map[string]string `protobuf:"bytes,3,rep,name=map_params,json=mapParams,proto3" json:"map_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 1 -> scoring
	// 2 -> sorting
	// 3 -> filter
	// R(ascii) -> retrieval
	// ....
	ExpLayer uint32 `protobuf:"varint,4,opt,name=exp_layer,json=expLayer,proto3" json:"exp_layer,omitempty"`
	// 实验名称
	ExpName              string   `protobuf:"bytes,5,opt,name=exp_name,json=expName,proto3" json:"exp_name,omitempty"`
	PageId               int32    `protobuf:"varint,6,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgMultiTestInfo) Reset()         { *m = AlgMultiTestInfo{} }
func (m *AlgMultiTestInfo) String() string { return proto.CompactTextString(m) }
func (*AlgMultiTestInfo) ProtoMessage()    {}
func (*AlgMultiTestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7049e2be4978557, []int{0}
}

func (m *AlgMultiTestInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlgMultiTestInfo.Unmarshal(m, b)
}
func (m *AlgMultiTestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlgMultiTestInfo.Marshal(b, m, deterministic)
}
func (m *AlgMultiTestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgMultiTestInfo.Merge(m, src)
}
func (m *AlgMultiTestInfo) XXX_Size() int {
	return xxx_messageInfo_AlgMultiTestInfo.Size(m)
}
func (m *AlgMultiTestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgMultiTestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AlgMultiTestInfo proto.InternalMessageInfo

func (m *AlgMultiTestInfo) GetTestId() int32 {
	if m != nil {
		return m.TestId
	}
	return 0
}

func (m *AlgMultiTestInfo) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *AlgMultiTestInfo) GetMapParams() map[string]string {
	if m != nil {
		return m.MapParams
	}
	return nil
}

func (m *AlgMultiTestInfo) GetExpLayer() uint32 {
	if m != nil {
		return m.ExpLayer
	}
	return 0
}

func (m *AlgMultiTestInfo) GetExpName() string {
	if m != nil {
		return m.ExpName
	}
	return ""
}

func (m *AlgMultiTestInfo) GetPageId() int32 {
	if m != nil {
		return m.PageId
	}
	return 0
}

type AbtInfo struct {
	SceneId              string                      `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	SubAlg               string                      `protobuf:"bytes,2,opt,name=sub_alg,json=subAlg,proto3" json:"sub_alg,omitempty"`
	TestInfos            map[int32]*AlgMultiTestInfo `protobuf:"bytes,3,rep,name=test_infos,json=testInfos,proto3" json:"test_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AbtInfo) Reset()         { *m = AbtInfo{} }
func (m *AbtInfo) String() string { return proto.CompactTextString(m) }
func (*AbtInfo) ProtoMessage()    {}
func (*AbtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7049e2be4978557, []int{1}
}

func (m *AbtInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbtInfo.Unmarshal(m, b)
}
func (m *AbtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbtInfo.Marshal(b, m, deterministic)
}
func (m *AbtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbtInfo.Merge(m, src)
}
func (m *AbtInfo) XXX_Size() int {
	return xxx_messageInfo_AbtInfo.Size(m)
}
func (m *AbtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AbtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AbtInfo proto.InternalMessageInfo

func (m *AbtInfo) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *AbtInfo) GetSubAlg() string {
	if m != nil {
		return m.SubAlg
	}
	return ""
}

func (m *AbtInfo) GetTestInfos() map[int32]*AlgMultiTestInfo {
	if m != nil {
		return m.TestInfos
	}
	return nil
}

type FeedRequest struct {
	SessionId            string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ReqId                string            `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Gaid                 string            `protobuf:"bytes,3,opt,name=gaid,proto3" json:"gaid,omitempty"`
	Imei                 string            `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty"`
	SceneId              SceneId           `protobuf:"varint,5,opt,name=scene_id,json=sceneId,proto3,enum=feed.api.SceneId" json:"scene_id,omitempty"`
	MobilUserModel       *MobilUserModel   `protobuf:"bytes,6,opt,name=mobil_user_model,json=mobilUserModel,proto3" json:"mobil_user_model,omitempty"`
	CommonRequest        *CommonRequest    `protobuf:"bytes,7,opt,name=common_request,json=commonRequest,proto3" json:"common_request,omitempty"`
	Openid               string            `protobuf:"bytes,8,opt,name=openid,proto3" json:"openid,omitempty"`
	ChannelId            ChannelType       `protobuf:"varint,9,opt,name=channel_id,json=channelId,proto3,enum=feed.api.ChannelType" json:"channel_id,omitempty"`
	Country              string            `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	State                string            `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	SceneSubalg          string            `protobuf:"bytes,12,opt,name=scene_subalg,json=sceneSubalg,proto3" json:"scene_subalg,omitempty"`
	ExtraInfo            map[string]string `protobuf:"bytes,13,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserInfo             *UserInfo         `protobuf:"bytes,31,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	AbtInfo              *AbtInfo          `protobuf:"bytes,32,opt,name=abt_info,json=abtInfo,proto3" json:"abt_info,omitempty"`
	StrategyInfo         *StrategyInfo     `protobuf:"bytes,33,opt,name=strategy_info,json=strategyInfo,proto3" json:"strategy_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FeedRequest) Reset()         { *m = FeedRequest{} }
func (m *FeedRequest) String() string { return proto.CompactTextString(m) }
func (*FeedRequest) ProtoMessage()    {}
func (*FeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7049e2be4978557, []int{2}
}

func (m *FeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedRequest.Unmarshal(m, b)
}
func (m *FeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedRequest.Marshal(b, m, deterministic)
}
func (m *FeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedRequest.Merge(m, src)
}
func (m *FeedRequest) XXX_Size() int {
	return xxx_messageInfo_FeedRequest.Size(m)
}
func (m *FeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedRequest proto.InternalMessageInfo

func (m *FeedRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FeedRequest) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *FeedRequest) GetGaid() string {
	if m != nil {
		return m.Gaid
	}
	return ""
}

func (m *FeedRequest) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *FeedRequest) GetSceneId() SceneId {
	if m != nil {
		return m.SceneId
	}
	return SceneId_FAKE_SCENE
}

func (m *FeedRequest) GetMobilUserModel() *MobilUserModel {
	if m != nil {
		return m.MobilUserModel
	}
	return nil
}

func (m *FeedRequest) GetCommonRequest() *CommonRequest {
	if m != nil {
		return m.CommonRequest
	}
	return nil
}

func (m *FeedRequest) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *FeedRequest) GetChannelId() ChannelType {
	if m != nil {
		return m.ChannelId
	}
	return ChannelType_FAKE_CHANNEL
}

func (m *FeedRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FeedRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *FeedRequest) GetSceneSubalg() string {
	if m != nil {
		return m.SceneSubalg
	}
	return ""
}

func (m *FeedRequest) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *FeedRequest) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *FeedRequest) GetAbtInfo() *AbtInfo {
	if m != nil {
		return m.AbtInfo
	}
	return nil
}

func (m *FeedRequest) GetStrategyInfo() *StrategyInfo {
	if m != nil {
		return m.StrategyInfo
	}
	return nil
}

type FeedResponse struct {
	ErrNo     int32             `protobuf:"varint,1,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
	ErrMsg    string            `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	ItemNum   int32             `protobuf:"varint,3,opt,name=item_num,json=itemNum,proto3" json:"item_num,omitempty"`
	FeedList  []*ItemInfo       `protobuf:"bytes,4,rep,name=feed_list,json=feedList,proto3" json:"feed_list,omitempty"`
	ExtraInfo map[string]string `protobuf:"bytes,5,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//  11 ~20 位置预留给上游  以下为内部使用字段
	RecallQueueMap       map[string]*ItemQueue `protobuf:"bytes,21,rep,name=recall_queue_map,json=recallQueueMap,proto3" json:"recall_queue_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FeedResponse) Reset()         { *m = FeedResponse{} }
func (m *FeedResponse) String() string { return proto.CompactTextString(m) }
func (*FeedResponse) ProtoMessage()    {}
func (*FeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7049e2be4978557, []int{3}
}

func (m *FeedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedResponse.Unmarshal(m, b)
}
func (m *FeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedResponse.Marshal(b, m, deterministic)
}
func (m *FeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedResponse.Merge(m, src)
}
func (m *FeedResponse) XXX_Size() int {
	return xxx_messageInfo_FeedResponse.Size(m)
}
func (m *FeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeedResponse proto.InternalMessageInfo

func (m *FeedResponse) GetErrNo() int32 {
	if m != nil {
		return m.ErrNo
	}
	return 0
}

func (m *FeedResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *FeedResponse) GetItemNum() int32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

func (m *FeedResponse) GetFeedList() []*ItemInfo {
	if m != nil {
		return m.FeedList
	}
	return nil
}

func (m *FeedResponse) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *FeedResponse) GetRecallQueueMap() map[string]*ItemQueue {
	if m != nil {
		return m.RecallQueueMap
	}
	return nil
}

func init() {
	proto.RegisterType((*AlgMultiTestInfo)(nil), "feed.api.AlgMultiTestInfo")
	proto.RegisterMapType((map[string]string)(nil), "feed.api.AlgMultiTestInfo.MapParamsEntry")
	proto.RegisterType((*AbtInfo)(nil), "feed.api.AbtInfo")
	proto.RegisterMapType((map[int32]*AlgMultiTestInfo)(nil), "feed.api.AbtInfo.TestInfosEntry")
	proto.RegisterType((*FeedRequest)(nil), "feed.api.FeedRequest")
	proto.RegisterMapType((map[string]string)(nil), "feed.api.FeedRequest.ExtraInfoEntry")
	proto.RegisterType((*FeedResponse)(nil), "feed.api.FeedResponse")
	proto.RegisterMapType((map[string]string)(nil), "feed.api.FeedResponse.ExtraInfoEntry")
	proto.RegisterMapType((map[string]*ItemQueue)(nil), "feed.api.FeedResponse.RecallQueueMapEntry")
}

func init() { proto.RegisterFile("feed_proto/feed_api.proto", fileDescriptor_d7049e2be4978557) }

var fileDescriptor_d7049e2be4978557 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xef, 0x6e, 0xe3, 0x44,
	0x10, 0x57, 0x9a, 0x3a, 0x89, 0x27, 0x4d, 0xd4, 0xdb, 0xa3, 0x3d, 0x37, 0x80, 0x48, 0x4f, 0x20,
	0xf5, 0x10, 0xca, 0xa1, 0x00, 0x12, 0x02, 0x04, 0xea, 0xfd, 0x41, 0x58, 0xba, 0x54, 0xb0, 0x2d,
	0x08, 0xf1, 0xc5, 0xda, 0xc4, 0xd3, 0x60, 0xe1, 0xb5, 0xdd, 0xdd, 0xf5, 0xa9, 0xf9, 0xc6, 0x8b,
	0xf0, 0x26, 0x3c, 0x08, 0x5f, 0x78, 0x17, 0xb4, 0xb3, 0xf6, 0xc5, 0x2e, 0x39, 0x24, 0x74, 0xdf,
	0xf6, 0x37, 0x33, 0x3b, 0x9e, 0xf9, 0xcd, 0x6f, 0xd6, 0x70, 0x72, 0x8d, 0x18, 0x47, 0x85, 0xca,
	0x4d, 0xfe, 0x98, 0x8e, 0xa2, 0x48, 0x66, 0x04, 0xd9, 0xc0, 0xe2, 0x99, 0x28, 0x92, 0xc9, 0x3b,
	0x77, 0x83, 0x56, 0xb9, 0x94, 0x79, 0xe6, 0xe2, 0x26, 0xa7, 0x0d, 0xaf, 0xcc, 0x97, 0x49, 0x1a,
	0x95, 0x1a, 0x55, 0x24, 0xf3, 0x18, 0x53, 0x17, 0xf2, 0xf0, 0x8f, 0x3d, 0x38, 0x3c, 0x4f, 0xd7,
	0x8b, 0x32, 0x35, 0xc9, 0x15, 0x6a, 0x13, 0x66, 0xd7, 0x39, 0x7b, 0x00, 0x7d, 0x83, 0xda, 0x44,
	0x49, 0x1c, 0x74, 0xa6, 0x9d, 0x33, 0x8f, 0xf7, 0x2c, 0x0c, 0x63, 0xeb, 0x50, 0x65, 0x8a, 0xd6,
	0xb1, 0xe7, 0x1c, 0x16, 0x86, 0x31, 0xfb, 0x0e, 0x40, 0x8a, 0x22, 0x2a, 0x84, 0x12, 0x52, 0x07,
	0xdd, 0x69, 0xf7, 0x6c, 0x38, 0x7f, 0x34, 0xab, 0xcb, 0x9c, 0xdd, 0xfd, 0xc2, 0x6c, 0x21, 0x8a,
	0xef, 0x29, 0xf6, 0x79, 0x66, 0xd4, 0x86, 0xfb, 0xb2, 0xc6, 0xec, 0x6d, 0xf0, 0xf1, 0xb6, 0x88,
	0x52, 0xb1, 0x41, 0x15, 0xec, 0x4f, 0x3b, 0x67, 0x23, 0x3e, 0xc0, 0xdb, 0xe2, 0x85, 0xc5, 0xec,
	0x04, 0xec, 0x39, 0xca, 0x84, 0xc4, 0xc0, 0x9b, 0x76, 0xce, 0x7c, 0xde, 0xc7, 0xdb, 0xe2, 0x42,
	0x48, 0xb4, 0xa5, 0x15, 0x62, 0x4d, 0xa5, 0xf5, 0x5c, 0x69, 0x16, 0x86, 0xf1, 0xe4, 0x2b, 0x18,
	0xb7, 0xbf, 0xc6, 0x0e, 0xa1, 0xfb, 0x1b, 0x6e, 0xa8, 0x35, 0x9f, 0xdb, 0x23, 0x7b, 0x0b, 0xbc,
	0x97, 0x22, 0x2d, 0x91, 0xba, 0xf2, 0xb9, 0x03, 0x5f, 0xec, 0x7d, 0xde, 0x79, 0xf8, 0x57, 0x07,
	0xfa, 0xe7, 0x4b, 0x47, 0xcb, 0x09, 0x0c, 0xf4, 0x0a, 0x33, 0xac, 0x79, 0xf1, 0x79, 0x9f, 0xb0,
	0x23, 0x46, 0x97, 0xcb, 0x48, 0xa4, 0xeb, 0x2a, 0x45, 0x4f, 0x97, 0xcb, 0xf3, 0x74, 0xcd, 0xbe,
	0x01, 0x70, 0x54, 0x66, 0xd7, 0x79, 0x4d, 0xcc, 0xb4, 0x41, 0x8c, 0x4b, 0x3d, 0xab, 0x89, 0xa9,
	0xf9, 0x30, 0x35, 0x9e, 0xfc, 0x0c, 0xe3, 0xb6, 0xb3, 0x59, 0xbe, 0xe7, 0xca, 0xff, 0xb8, 0x59,
	0xfe, 0x70, 0x3e, 0x79, 0x3d, 0xf1, 0xcd, 0xd6, 0xfe, 0xf6, 0x60, 0xf8, 0x2d, 0x62, 0xcc, 0xf1,
	0xa6, 0x44, 0x6d, 0xd8, 0xbb, 0x00, 0x1a, 0xb5, 0x4e, 0xf2, 0x6c, 0xdb, 0xa0, 0x5f, 0x59, 0xc2,
	0x98, 0x1d, 0x41, 0x4f, 0xe1, 0x4d, 0x3d, 0x7a, 0x9f, 0x7b, 0x0a, 0x6f, 0xc2, 0x98, 0x31, 0xd8,
	0x5f, 0x8b, 0x24, 0x0e, 0xba, 0x64, 0xa4, 0xb3, 0xb5, 0x25, 0x12, 0x13, 0x1a, 0x9f, 0xcf, 0xe9,
	0xcc, 0x3e, 0x6a, 0x90, 0x67, 0x47, 0x37, 0x9e, 0xdf, 0xdb, 0x96, 0x79, 0xe9, 0x68, 0xdc, 0xf2,
	0xf9, 0x04, 0x0e, 0xef, 0x0a, 0x96, 0xc6, 0x3a, 0x9c, 0x07, 0xdb, 0x5b, 0x0b, 0x1b, 0xf1, 0xa3,
	0x46, 0xb5, 0xb0, 0x7e, 0x3e, 0x96, 0x2d, 0xcc, 0xbe, 0x86, 0xb1, 0xdb, 0x86, 0x48, 0xb9, 0x0e,
	0x83, 0x3e, 0x65, 0x78, 0xb0, 0xcd, 0xf0, 0x94, 0xfc, 0x15, 0x01, 0x7c, 0xb4, 0x6a, 0x42, 0x76,
	0x0c, 0xbd, 0xbc, 0xc0, 0x2c, 0x89, 0x83, 0x81, 0x1b, 0xa9, 0x43, 0xec, 0x53, 0x80, 0xd5, 0xaf,
	0x22, 0xcb, 0x30, 0xb5, 0xbd, 0xf8, 0xd4, 0xcb, 0x51, 0x23, 0xa7, 0xf3, 0x5d, 0x6d, 0x0a, 0xe4,
	0x7e, 0x15, 0x18, 0xc6, 0x2c, 0x80, 0xfe, 0x2a, 0x2f, 0xed, 0x00, 0x03, 0x70, 0xda, 0xa9, 0xa0,
	0x15, 0x9f, 0x36, 0xc2, 0x60, 0x30, 0x74, 0xbc, 0x12, 0x60, 0xa7, 0x70, 0xe0, 0xf8, 0xd2, 0xe5,
	0xd2, 0xca, 0xea, 0x80, 0x9c, 0x43, 0xb2, 0x5d, 0x92, 0x89, 0x3d, 0x05, 0xc0, 0x5b, 0xa3, 0x04,
	0x89, 0x2b, 0x18, 0x91, 0xb6, 0xde, 0xdf, 0x16, 0xd2, 0x98, 0xed, 0xec, 0xb9, 0x8d, 0xb3, 0x02,
	0xa8, 0xf4, 0x85, 0x35, 0x66, 0x8f, 0xc1, 0x27, 0x8e, 0x29, 0xc7, 0x7b, 0x44, 0x10, 0xdb, 0xe6,
	0xb0, 0x6c, 0x92, 0x6e, 0x06, 0x65, 0x75, 0xb2, 0x83, 0x14, 0x4b, 0x27, 0xe8, 0x60, 0x4a, 0xf1,
	0xf7, 0xfe, 0xa5, 0x67, 0xde, 0x17, 0xd5, 0xce, 0x7c, 0x09, 0x23, 0x6d, 0x94, 0x30, 0xb8, 0xde,
	0xb8, 0x2b, 0xa7, 0x74, 0xe5, 0xb8, 0x31, 0xfb, 0xca, 0x4d, 0xf7, 0x0e, 0x74, 0x03, 0xd9, 0xd5,
	0x6d, 0x17, 0xfe, 0xbf, 0x56, 0xf7, 0xcf, 0x2e, 0x1c, 0x38, 0x0e, 0x74, 0x91, 0x67, 0x1a, 0xad,
	0x82, 0x51, 0xa9, 0x28, 0xcb, 0xab, 0xdd, 0xf1, 0x50, 0xa9, 0x0b, 0x7a, 0xed, 0xac, 0x59, 0xea,
	0x57, 0xbb, 0x8b, 0x4a, 0x2d, 0xf4, 0xda, 0xee, 0x7b, 0x62, 0x50, 0x46, 0x59, 0x29, 0x49, 0xde,
	0x1e, 0xef, 0x5b, 0x7c, 0x51, 0x4a, 0xcb, 0x1a, 0xbd, 0xad, 0x69, 0xa2, 0x4d, 0xb0, 0x4f, 0xcc,
	0x37, 0x58, 0x0b, 0x0d, 0x4a, 0xc7, 0x9a, 0x35, 0xbd, 0x48, 0xb4, 0x61, 0xcf, 0x5a, 0xb3, 0xf2,
	0xe8, 0xc6, 0x07, 0x77, 0x67, 0xe5, 0xea, 0xfc, 0x8f, 0x61, 0x5d, 0xc1, 0xa1, 0xc2, 0x95, 0x48,
	0xd3, 0xe8, 0xa6, 0xc4, 0x12, 0x23, 0x29, 0x8a, 0xe0, 0x88, 0x72, 0x7d, 0xf8, 0x9a, 0x5c, 0x9c,
	0xc2, 0x7f, 0xb0, 0xd1, 0x0b, 0x51, 0xb8, 0x84, 0x63, 0xd5, 0x32, 0xbe, 0x19, 0xcd, 0x93, 0x9f,
	0xe0, 0xfe, 0x8e, 0x8f, 0xec, 0x48, 0xf1, 0xa8, 0xfd, 0x4a, 0xdd, 0x6f, 0xf3, 0x45, 0xb7, 0x1b,
	0x79, 0xe7, 0xcf, 0xdc, 0xeb, 0x74, 0x89, 0xea, 0x65, 0xb2, 0x42, 0xf6, 0x19, 0xec, 0xdb, 0x78,
	0x76, 0xb4, 0x53, 0xe0, 0x93, 0xe3, 0xdd, 0xfd, 0x3f, 0x19, 0xfd, 0xf2, 0xea, 0x67, 0xf9, 0x7b,
	0xa7, 0xb3, 0xec, 0xd1, 0x5f, 0xef, 0x93, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xaa, 0x43,
	0x82, 0x5d, 0x07, 0x00, 0x00,
}
